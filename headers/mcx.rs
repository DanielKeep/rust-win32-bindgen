#[repr(C)] pub struct MODEMDEVCAPS { dwActualSize: ::minwindef::DWORD, dwRequiredSize: ::minwindef::DWORD, dwDevSpecificOffset: ::minwindef::DWORD, dwDevSpecificSize: ::minwindef::DWORD, dwModemProviderVersion: ::minwindef::DWORD, dwModemManufacturerOffset: ::minwindef::DWORD, dwModemManufacturerSize: ::minwindef::DWORD, dwModemModelOffset: ::minwindef::DWORD, dwModemModelSize: ::minwindef::DWORD, dwModemVersionOffset: ::minwindef::DWORD, dwModemVersionSize: ::minwindef::DWORD, dwDialOptions: ::minwindef::DWORD, dwCallSetupFailTimer: ::minwindef::DWORD, dwInactivityTimeout: ::minwindef::DWORD, dwSpeakerVolume: ::minwindef::DWORD, dwSpeakerMode: ::minwindef::DWORD, dwModemOptions: ::minwindef::DWORD, dwMaxDTERate: ::minwindef::DWORD, dwMaxDCERate: ::minwindef::DWORD, abVariablePortion: *mut [::minwindef::BYTE; 1] } /* mcx.h:16:16, mcx.h:16:16, mcx.h:16:16 */
pub type PMODEMDEVCAPS = *mut ::mcx::MODEMDEVCAPS; /* mcx.h:43:18, mcx.h:43:18, mcx.h:43:18 */
pub type LPMODEMDEVCAPS = *mut ::mcx::MODEMDEVCAPS; /* mcx.h:43:34, mcx.h:43:34, mcx.h:43:34 */
#[repr(C)] pub struct MODEMSETTINGS { dwActualSize: ::minwindef::DWORD, dwRequiredSize: ::minwindef::DWORD, dwDevSpecificOffset: ::minwindef::DWORD, dwDevSpecificSize: ::minwindef::DWORD, dwCallSetupFailTimer: ::minwindef::DWORD, dwInactivityTimeout: ::minwindef::DWORD, dwSpeakerVolume: ::minwindef::DWORD, dwSpeakerMode: ::minwindef::DWORD, dwPreferredModemOptions: ::minwindef::DWORD, dwNegotiatedModemOptions: ::minwindef::DWORD, dwNegotiatedDCERate: ::minwindef::DWORD, abVariablePortion: *mut [::minwindef::BYTE; 1] } /* mcx.h:45:16, mcx.h:45:16, mcx.h:45:16 */
pub type PMODEMSETTINGS = *mut ::mcx::MODEMSETTINGS; /* mcx.h:64:19, mcx.h:64:19, mcx.h:64:19 */
pub type LPMODEMSETTINGS = *mut ::mcx::MODEMSETTINGS; /* mcx.h:64:36, mcx.h:64:36, mcx.h:64:36 */
pub const DIALOPTION_BILLING: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* mcx.h:67:9, mcx.h:67:9, mcx.h:67:9 */
pub const DIALOPTION_QUIET: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* mcx.h:68:9, mcx.h:68:9, mcx.h:68:9 */
pub const DIALOPTION_DIALTONE: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* mcx.h:69:9, mcx.h:69:9, mcx.h:69:9 */
pub const MDMVOLFLAG_LOW: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:72:9, mcx.h:72:9, mcx.h:72:9 */
pub const MDMVOLFLAG_MEDIUM: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:73:9, mcx.h:73:9, mcx.h:73:9 */
pub const MDMVOLFLAG_HIGH: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* mcx.h:74:9, mcx.h:74:9, mcx.h:74:9 */
pub const MDMVOL_LOW: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:77:9, mcx.h:77:9, mcx.h:77:9 */
pub const MDMVOL_MEDIUM: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:78:9, mcx.h:78:9, mcx.h:78:9 */
pub const MDMVOL_HIGH: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:79:9, mcx.h:79:9, mcx.h:79:9 */
pub const MDMSPKRFLAG_OFF: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:82:9, mcx.h:82:9, mcx.h:82:9 */
pub const MDMSPKRFLAG_DIAL: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:83:9, mcx.h:83:9, mcx.h:83:9 */
pub const MDMSPKRFLAG_ON: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* mcx.h:84:9, mcx.h:84:9, mcx.h:84:9 */
pub const MDMSPKRFLAG_CALLSETUP: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* mcx.h:85:9, mcx.h:85:9, mcx.h:85:9 */
pub const MDMSPKR_OFF: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:88:9, mcx.h:88:9, mcx.h:88:9 */
pub const MDMSPKR_DIAL: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:89:9, mcx.h:89:9, mcx.h:89:9 */
pub const MDMSPKR_ON: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:90:9, mcx.h:90:9, mcx.h:90:9 */
pub const MDMSPKR_CALLSETUP: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* mcx.h:91:9, mcx.h:91:9, mcx.h:91:9 */
pub const MDM_COMPRESSION: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:94:9, mcx.h:94:9, mcx.h:94:9 */
pub const MDM_ERROR_CONTROL: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:95:9, mcx.h:95:9, mcx.h:95:9 */
pub const MDM_FORCED_EC: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* mcx.h:96:9, mcx.h:96:9, mcx.h:96:9 */
pub const MDM_CELLULAR: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* mcx.h:97:9, mcx.h:97:9, mcx.h:97:9 */
pub const MDM_FLOWCONTROL_HARD: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* mcx.h:98:9, mcx.h:98:9, mcx.h:98:9 */
pub const MDM_FLOWCONTROL_SOFT: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* mcx.h:99:9, mcx.h:99:9, mcx.h:99:9 */
pub const MDM_CCITT_OVERRIDE: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* mcx.h:100:9, mcx.h:100:9, mcx.h:100:9 */
pub const MDM_SPEED_ADJUST: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* mcx.h:101:9, mcx.h:101:9, mcx.h:101:9 */
pub const MDM_TONE_DIAL: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* mcx.h:102:9, mcx.h:102:9, mcx.h:102:9 */
pub const MDM_BLIND_DIAL: i32 = 0x200i32; /* Integer(512, Yes, Unknown) */ /* mcx.h:103:9, mcx.h:103:9, mcx.h:103:9 */
pub const MDM_V23_OVERRIDE: i32 = 0x400i32; /* Integer(1024, Yes, Unknown) */ /* mcx.h:104:9, mcx.h:104:9, mcx.h:104:9 */
pub const MDM_DIAGNOSTICS: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* mcx.h:105:9, mcx.h:105:9, mcx.h:105:9 */
pub const MDM_MASK_BEARERMODE: i32 = 0xf000i32; /* Integer(61440, Yes, Unknown) */ /* mcx.h:120:9, mcx.h:120:9, mcx.h:120:9 */
pub const MDM_SHIFT_BEARERMODE: i32 = 0xci32; /* Integer(12, Yes, Unknown) */ /* mcx.h:121:9, mcx.h:121:9, mcx.h:121:9 */
pub const MDM_MASK_PROTOCOLID: i32 = 0xf0000i32; /* Integer(983040, Yes, Unknown) */ /* mcx.h:123:9, mcx.h:123:9, mcx.h:123:9 */
pub const MDM_SHIFT_PROTOCOLID: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* mcx.h:124:9, mcx.h:124:9, mcx.h:124:9 */
pub const MDM_MASK_PROTOCOLDATA: i32 = 0xff00000i32; /* Integer(267386880, Yes, Unknown) */ /* mcx.h:126:9, mcx.h:126:9, mcx.h:126:9 */
pub const MDM_SHIFT_PROTOCOLDATA: i32 = 0x14i32; /* Integer(20, Yes, Unknown) */ /* mcx.h:127:9, mcx.h:127:9, mcx.h:127:9 */
#[doc(inline)] pub use ::mcx::MDM_SHIFT_PROTOCOLID as MDM_SHIFT_PROTOCOLINFO; /* mcx.h:133:9, mcx.h:133:9, mcx.h:133:9 */
#[doc(inline)] pub use ::mcx::MDM_SHIFT_BEARERMODE as MDM_SHIFT_EXTENDEDINFO; /* mcx.h:139:9, mcx.h:139:9, mcx.h:139:9 */
pub const MDM_BEARERMODE_ANALOG: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:216:9, mcx.h:216:9, mcx.h:216:9 */
pub const MDM_BEARERMODE_ISDN: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:217:9, mcx.h:217:9, mcx.h:217:9 */
pub const MDM_BEARERMODE_GSM: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:218:9, mcx.h:218:9, mcx.h:218:9 */
pub const MDM_PROTOCOLID_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:225:9, mcx.h:225:9, mcx.h:225:9 */
pub const MDM_PROTOCOLID_HDLCPPP: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:226:9, mcx.h:226:9, mcx.h:226:9 */
pub const MDM_PROTOCOLID_V128: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:227:9, mcx.h:227:9, mcx.h:227:9 */
pub const MDM_PROTOCOLID_X75: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* mcx.h:228:9, mcx.h:228:9, mcx.h:228:9 */
pub const MDM_PROTOCOLID_V110: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* mcx.h:229:9, mcx.h:229:9, mcx.h:229:9 */
pub const MDM_PROTOCOLID_V120: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* mcx.h:230:9, mcx.h:230:9, mcx.h:230:9 */
pub const MDM_PROTOCOLID_AUTO: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* mcx.h:231:9, mcx.h:231:9, mcx.h:231:9 */
pub const MDM_PROTOCOLID_ANALOG: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* mcx.h:232:9, mcx.h:232:9, mcx.h:232:9 */
pub const MDM_PROTOCOLID_GPRS: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* mcx.h:233:9, mcx.h:233:9, mcx.h:233:9 */
pub const MDM_PROTOCOLID_PIAFS: i32 = 0x9i32; /* Integer(9, Yes, Unknown) */ /* mcx.h:234:9, mcx.h:234:9, mcx.h:234:9 */
pub const MDM_SHIFT_HDLCPPP_SPEED: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:244:9, mcx.h:244:9, mcx.h:244:9 */
pub const MDM_MASK_HDLCPPP_SPEED: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* mcx.h:245:9, mcx.h:245:9, mcx.h:245:9 */
pub const MDM_HDLCPPP_SPEED_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:247:9, mcx.h:247:9, mcx.h:247:9 */
pub const MDM_HDLCPPP_SPEED_64K: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:248:9, mcx.h:248:9, mcx.h:248:9 */
pub const MDM_HDLCPPP_SPEED_56K: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:249:9, mcx.h:249:9, mcx.h:249:9 */
pub const MDM_SHIFT_HDLCPPP_AUTH: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* mcx.h:252:9, mcx.h:252:9, mcx.h:252:9 */
pub const MDM_HDLCPPP_AUTH_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:255:9, mcx.h:255:9, mcx.h:255:9 */
pub const MDM_HDLCPPP_AUTH_NONE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:256:9, mcx.h:256:9, mcx.h:256:9 */
pub const MDM_HDLCPPP_AUTH_PAP: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:257:9, mcx.h:257:9, mcx.h:257:9 */
pub const MDM_HDLCPPP_AUTH_CHAP: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* mcx.h:258:9, mcx.h:258:9, mcx.h:258:9 */
pub const MDM_HDLCPPP_AUTH_MSCHAP: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* mcx.h:259:9, mcx.h:259:9, mcx.h:259:9 */
pub const MDM_SHIFT_HDLCPPP_ML: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* mcx.h:262:9, mcx.h:262:9, mcx.h:262:9 */
pub const MDM_HDLCPPP_ML_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:265:9, mcx.h:265:9, mcx.h:265:9 */
pub const MDM_HDLCPPP_ML_NONE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:266:9, mcx.h:266:9, mcx.h:266:9 */
pub const MDM_HDLCPPP_ML_2: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:267:9, mcx.h:267:9, mcx.h:267:9 */
pub const MDM_SHIFT_V120_SPEED: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:381:9, mcx.h:381:9, mcx.h:381:9 */
pub const MDM_MASK_V120_SPEED: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* mcx.h:382:9, mcx.h:382:9, mcx.h:382:9 */
pub const MDM_V120_SPEED_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:384:9, mcx.h:384:9, mcx.h:384:9 */
pub const MDM_V120_SPEED_64K: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:385:9, mcx.h:385:9, mcx.h:385:9 */
pub const MDM_V120_SPEED_56K: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:386:9, mcx.h:386:9, mcx.h:386:9 */
pub const MDM_SHIFT_V120_ML: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* mcx.h:389:9, mcx.h:389:9, mcx.h:389:9 */
pub const MDM_V120_ML_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:392:9, mcx.h:392:9, mcx.h:392:9 */
pub const MDM_V120_ML_NONE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:393:9, mcx.h:393:9, mcx.h:393:9 */
pub const MDM_V120_ML_2: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:394:9, mcx.h:394:9, mcx.h:394:9 */
pub const MDM_SHIFT_X75_DATA: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:447:9, mcx.h:447:9, mcx.h:447:9 */
pub const MDM_MASK_X75_DATA: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* mcx.h:448:9, mcx.h:448:9, mcx.h:448:9 */
pub const MDM_X75_DATA_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:450:9, mcx.h:450:9, mcx.h:450:9 */
pub const MDM_X75_DATA_64K: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:451:9, mcx.h:451:9, mcx.h:451:9 */
pub const MDM_X75_DATA_128K: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:452:9, mcx.h:452:9, mcx.h:452:9 */
pub const MDM_X75_DATA_T_70: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* mcx.h:453:9, mcx.h:453:9, mcx.h:453:9 */
pub const MDM_X75_DATA_BTX: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* mcx.h:454:9, mcx.h:454:9, mcx.h:454:9 */
pub const MDM_SHIFT_V110_SPEED: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:501:9, mcx.h:501:9, mcx.h:501:9 */
pub const MDM_MASK_V110_SPEED: i32 = 0xfi32; /* Integer(15, Yes, Unknown) */ /* mcx.h:502:9, mcx.h:502:9, mcx.h:502:9 */
pub const MDM_V110_SPEED_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:504:9, mcx.h:504:9, mcx.h:504:9 */
pub const MDM_V110_SPEED_1DOT2K: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:505:9, mcx.h:505:9, mcx.h:505:9 */
pub const MDM_V110_SPEED_2DOT4K: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:506:9, mcx.h:506:9, mcx.h:506:9 */
pub const MDM_V110_SPEED_4DOT8K: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* mcx.h:507:9, mcx.h:507:9, mcx.h:507:9 */
pub const MDM_V110_SPEED_9DOT6K: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* mcx.h:508:9, mcx.h:508:9, mcx.h:508:9 */
pub const MDM_V110_SPEED_12DOT0K: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* mcx.h:509:9, mcx.h:509:9, mcx.h:509:9 */
pub const MDM_V110_SPEED_14DOT4K: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* mcx.h:510:9, mcx.h:510:9, mcx.h:510:9 */
pub const MDM_V110_SPEED_19DOT2K: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* mcx.h:511:9, mcx.h:511:9, mcx.h:511:9 */
pub const MDM_V110_SPEED_28DOT8K: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* mcx.h:512:9, mcx.h:512:9, mcx.h:512:9 */
pub const MDM_V110_SPEED_38DOT4K: i32 = 0x9i32; /* Integer(9, Yes, Unknown) */ /* mcx.h:513:9, mcx.h:513:9, mcx.h:513:9 */
pub const MDM_V110_SPEED_57DOT6K: i32 = 0xai32; /* Integer(10, Yes, Unknown) */ /* mcx.h:514:9, mcx.h:514:9, mcx.h:514:9 */
pub const MDM_SHIFT_AUTO_SPEED: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:610:9, mcx.h:610:9, mcx.h:610:9 */
pub const MDM_MASK_AUTO_SPEED: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* mcx.h:611:9, mcx.h:611:9, mcx.h:611:9 */
pub const MDM_AUTO_SPEED_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:612:9, mcx.h:612:9, mcx.h:612:9 */
pub const MDM_SHIFT_AUTO_ML: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* mcx.h:614:9, mcx.h:614:9, mcx.h:614:9 */
pub const MDM_AUTO_ML_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:616:9, mcx.h:616:9, mcx.h:616:9 */
pub const MDM_AUTO_ML_NONE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:617:9, mcx.h:617:9, mcx.h:617:9 */
pub const MDM_AUTO_ML_2: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:618:9, mcx.h:618:9, mcx.h:618:9 */
pub const MDM_ANALOG_RLP_ON: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:650:9, mcx.h:650:9, mcx.h:650:9 */
pub const MDM_ANALOG_RLP_OFF: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:651:9, mcx.h:651:9, mcx.h:651:9 */
pub const MDM_ANALOG_V34: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* mcx.h:652:9, mcx.h:652:9, mcx.h:652:9 */
pub const MDM_PIAFS_INCOMING: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* mcx.h:707:9, mcx.h:707:9, mcx.h:707:9 */
pub const MDM_PIAFS_OUTGOING: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* mcx.h:708:9, mcx.h:708:9, mcx.h:708:9 */
