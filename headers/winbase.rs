#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub type PFIBER_START_ROUTINE = extern "system" fn(*mut ::libc::c_void); /* winbase.h:280:23, winbase.h:280:23, winbase.h:280:23 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub type LPFIBER_START_ROUTINE = ::winbase::PFIBER_START_ROUTINE; /* winbase.h:283:30, winbase.h:283:30, winbase.h:283:30 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub type PFIBER_CALLOUT_ROUTINE = extern "system" fn(*mut ::libc::c_void) -> *mut ::libc::c_void; /* winbase.h:285:25, winbase.h:285:25, winbase.h:285:25 */
#[cfg(feature="winapi_app")] #[cfg(any(target_arch="x86"))] pub type LPLDT_ENTRY = ::winnt::PLDT_ENTRY; /* winbase.h:298:20 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct COMMPROP { wPacketLength: ::minwindef::WORD, wPacketVersion: ::minwindef::WORD, dwServiceMask: ::minwindef::DWORD, dwReserved1: ::minwindef::DWORD, dwMaxTxQueue: ::minwindef::DWORD, dwMaxRxQueue: ::minwindef::DWORD, dwMaxBaud: ::minwindef::DWORD, dwProvSubType: ::minwindef::DWORD, dwProvCapabilities: ::minwindef::DWORD, dwSettableParams: ::minwindef::DWORD, dwSettableBaud: ::minwindef::DWORD, wSettableData: ::minwindef::WORD, wSettableStopParity: ::minwindef::WORD, dwCurrentTxQueue: ::minwindef::DWORD, dwCurrentRxQueue: ::minwindef::DWORD, dwProvSpec1: ::minwindef::DWORD, dwProvSpec2: ::minwindef::DWORD, wcProvChar: *mut [::winnt::WCHAR; 1] } /* winbase.h:403:16, winbase.h:403:16, winbase.h:403:16 */
#[cfg(feature="winapi_app")] pub type LPCOMMPROP = *mut ::winbase::COMMPROP; /* winbase.h:422:13, winbase.h:422:13, winbase.h:422:13 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct COMSTAT { fCtsHold: ::minwindef::DWORD, fDsrHold: ::minwindef::DWORD, fRlsdHold: ::minwindef::DWORD, fXoffHold: ::minwindef::DWORD, fXoffSent: ::minwindef::DWORD, fEof: ::minwindef::DWORD, fTxim: ::minwindef::DWORD, fReserved: ::minwindef::DWORD, cbInQue: ::minwindef::DWORD, cbOutQue: ::minwindef::DWORD } /* winbase.h:430:16, winbase.h:430:16, winbase.h:430:16 */
#[cfg(feature="winapi_app")] pub type LPCOMSTAT = *mut ::winbase::COMSTAT; /* winbase.h:441:13, winbase.h:441:13, winbase.h:441:13 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct DCB { DCBlength: ::minwindef::DWORD, BaudRate: ::minwindef::DWORD, fBinary: ::minwindef::DWORD, fParity: ::minwindef::DWORD, fOutxCtsFlow: ::minwindef::DWORD, fOutxDsrFlow: ::minwindef::DWORD, fDtrControl: ::minwindef::DWORD, fDsrSensitivity: ::minwindef::DWORD, fTXContinueOnXoff: ::minwindef::DWORD, fOutX: ::minwindef::DWORD, fInX: ::minwindef::DWORD, fErrorChar: ::minwindef::DWORD, fNull: ::minwindef::DWORD, fRtsControl: ::minwindef::DWORD, fAbortOnError: ::minwindef::DWORD, fDummy2: ::minwindef::DWORD, wReserved: ::minwindef::WORD, XonLim: ::minwindef::WORD, XoffLim: ::minwindef::WORD, ByteSize: ::minwindef::BYTE, Parity: ::minwindef::BYTE, StopBits: ::minwindef::BYTE, XonChar: ::libc::c_schar, XoffChar: ::libc::c_schar, ErrorChar: ::libc::c_schar, EofChar: ::libc::c_schar, EvtChar: ::libc::c_schar, wReserved1: ::minwindef::WORD } /* winbase.h:458:16, winbase.h:458:16, winbase.h:458:16 */
#[cfg(feature="winapi_app")] pub type LPDCB = *mut ::winbase::DCB; /* winbase.h:487:9, winbase.h:487:9, winbase.h:487:9 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct COMMTIMEOUTS { ReadIntervalTimeout: ::minwindef::DWORD, ReadTotalTimeoutMultiplier: ::minwindef::DWORD, ReadTotalTimeoutConstant: ::minwindef::DWORD, WriteTotalTimeoutMultiplier: ::minwindef::DWORD, WriteTotalTimeoutConstant: ::minwindef::DWORD } /* winbase.h:489:16, winbase.h:489:16, winbase.h:489:16 */
#[cfg(feature="winapi_app")] pub type LPCOMMTIMEOUTS = *mut ::winbase::COMMTIMEOUTS; /* winbase.h:495:17, winbase.h:495:17, winbase.h:495:17 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct COMMCONFIG { dwSize: ::minwindef::DWORD, wVersion: ::minwindef::WORD, wReserved: ::minwindef::WORD, dcb: ::winbase::DCB, dwProviderSubType: ::minwindef::DWORD, dwProviderOffset: ::minwindef::DWORD, dwProviderSize: ::minwindef::DWORD, wcProviderData: *mut [::winnt::WCHAR; 1] } /* winbase.h:497:16, winbase.h:497:16, winbase.h:497:16 */
#[cfg(feature="winapi_app")] pub type LPCOMMCONFIG = *mut ::winbase::COMMCONFIG; /* winbase.h:508:15, winbase.h:508:15, winbase.h:508:15 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct MEMORYSTATUS { dwLength: ::minwindef::DWORD, dwMemoryLoad: ::minwindef::DWORD, dwTotalPhys: ::basetsd::SIZE_T, dwAvailPhys: ::basetsd::SIZE_T, dwTotalPageFile: ::basetsd::SIZE_T, dwAvailPageFile: ::basetsd::SIZE_T, dwTotalVirtual: ::basetsd::SIZE_T, dwAvailVirtual: ::basetsd::SIZE_T } /* winbase.h:545:16, winbase.h:545:16, winbase.h:545:16 */
#[cfg(feature="winapi_app")] pub type LPMEMORYSTATUS = *mut ::winbase::MEMORYSTATUS; /* winbase.h:554:18, winbase.h:554:18, winbase.h:554:18 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct JIT_DEBUG_INFO { dwSize: ::minwindef::DWORD, dwProcessorArchitecture: ::minwindef::DWORD, dwThreadID: ::minwindef::DWORD, dwReserved0: ::minwindef::DWORD, lpExceptionAddress: ::basetsd::ULONG64, lpExceptionRecord: ::basetsd::ULONG64, lpContextRecord: ::basetsd::ULONG64 } /* winbase.h:646:16, winbase.h:646:16, winbase.h:646:16 */
#[cfg(feature="winapi_app")] pub type LPJIT_DEBUG_INFO = *mut ::winbase::JIT_DEBUG_INFO; /* winbase.h:654:20, winbase.h:654:20, winbase.h:654:20 */
#[cfg(feature="winapi_app")] pub type JIT_DEBUG_INFO32 = ::winbase::JIT_DEBUG_INFO; /* winbase.h:656:24, winbase.h:656:24, winbase.h:656:24 */
#[cfg(feature="winapi_app")] pub type LPJIT_DEBUG_INFO32 = *mut ::winbase::JIT_DEBUG_INFO; /* winbase.h:656:43, winbase.h:656:43, winbase.h:656:43 */
#[cfg(feature="winapi_app")] pub type JIT_DEBUG_INFO64 = ::winbase::JIT_DEBUG_INFO; /* winbase.h:657:24, winbase.h:657:24, winbase.h:657:24 */
#[cfg(feature="winapi_app")] pub type LPJIT_DEBUG_INFO64 = *mut ::winbase::JIT_DEBUG_INFO; /* winbase.h:657:43, winbase.h:657:43, winbase.h:657:43 */
#[cfg(feature="winapi_app")] pub type LPEXCEPTION_RECORD = ::winnt::PEXCEPTION_RECORD; /* winbase.h:660:27, winbase.h:660:27, winbase.h:660:27 */
#[cfg(feature="winapi_app")] pub type LPEXCEPTION_POINTERS = ::winnt::PEXCEPTION_POINTERS; /* winbase.h:661:29, winbase.h:661:29, winbase.h:661:29 */
#[cfg(feature="winapi_app")] #[repr(C)] pub struct OFSTRUCT { cBytes: ::minwindef::BYTE, fFixedDisk: ::minwindef::BYTE, nErrCode: ::minwindef::WORD, Reserved1: ::minwindef::WORD, Reserved2: ::minwindef::WORD, szPathName: *mut [::winnt::CHAR; 128] } /* winbase.h:875:16, winbase.h:875:16, winbase.h:875:16 */
#[cfg(feature="winapi_app")] pub type LPOFSTRUCT = *mut ::winbase::OFSTRUCT; /* winbase.h:882:14, winbase.h:882:14, winbase.h:882:14 */
#[cfg(feature="winapi_app")] pub type POFSTRUCT = *mut ::winbase::OFSTRUCT; /* winbase.h:882:27, winbase.h:882:27, winbase.h:882:27 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PUMS_CONTEXT = *mut ::libc::c_void; /* winbase.h:1399:15, winbase.h:1399:15, winbase.h:1399:15 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PUMS_COMPLETION_LIST = *mut ::libc::c_void; /* winbase.h:1401:15, winbase.h:1401:15, winbase.h:1401:15 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type UMS_THREAD_INFO_CLASS = ::winnt::RTL_UMS_THREAD_INFO_CLASS; /* winbase.h:1403:41, winbase.h:1403:41, winbase.h:1403:41 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PUMS_THREAD_INFO_CLASS = *mut ::winnt::RTL_UMS_THREAD_INFO_CLASS; /* winbase.h:1403:65, winbase.h:1403:65, winbase.h:1403:65 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type UMS_SCHEDULER_REASON = ::winnt::RTL_UMS_SCHEDULER_REASON; /* winbase.h:1405:40, winbase.h:1405:40, winbase.h:1405:40 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PUMS_SCHEDULER_ENTRY_POINT = ::winnt::PRTL_UMS_SCHEDULER_ENTRY_POINT; /* winbase.h:1407:40, winbase.h:1407:40, winbase.h:1407:40 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub struct UMS_SCHEDULER_STARTUP_INFO { UmsVersion: ::minwindef::ULONG, CompletionList: ::winbase::PUMS_COMPLETION_LIST, SchedulerProc: ::winbase::PUMS_SCHEDULER_ENTRY_POINT, SchedulerParam: ::winnt::PVOID } /* winbase.h:1409:16, winbase.h:1409:16, winbase.h:1409:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PUMS_SCHEDULER_STARTUP_INFO = *mut ::winbase::UMS_SCHEDULER_STARTUP_INFO; /* winbase.h:1432:32, winbase.h:1432:32, winbase.h:1432:32 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub struct UMS_SYSTEM_THREAD_INFORMATION { UmsVersion: ::minwindef::ULONG, u: ::winbase::UMS_SYSTEM_THREAD_INFORMATION_Child_1 } /* winbase.h:1434:16, winbase.h:1434:16, winbase.h:1434:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub /*union*/ struct UMS_SYSTEM_THREAD_INFORMATION_Child_1; /* STUB! */ /* winbase.h:1436:5, winbase.h:1436:5, winbase.h:1436:5 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PUMS_SYSTEM_THREAD_INFORMATION = *mut ::winbase::UMS_SYSTEM_THREAD_INFORMATION; /* winbase.h:1443:35, winbase.h:1443:35, winbase.h:1443:35 */
#[cfg(feature="winapi_desktop")] #[repr(C)] pub enum PROCESS_INFORMATION_CLASS {ProcessMemoryPriority = 0, ProcessInformationClassMax = 1} pub use self::PROCESS_INFORMATION_CLASS::{ProcessMemoryPriority, ProcessInformationClassMax}; /* winbase.h:1600:14, winbase.h:1600:14, winbase.h:1600:14 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type POWER_REQUEST_CONTEXT = ::minwinbase::REASON_CONTEXT; /* winbase.h:1688:24, winbase.h:1688:24, winbase.h:1688:24 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PPOWER_REQUEST_CONTEXT = *mut ::minwinbase::REASON_CONTEXT; /* winbase.h:1688:48, winbase.h:1688:48, winbase.h:1688:48 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub type LPPOWER_REQUEST_CONTEXT = *mut ::minwinbase::REASON_CONTEXT; /* winbase.h:1688:73, winbase.h:1688:73, winbase.h:1688:73 */
#[cfg(feature="winapi_desktop")] #[repr(C)] pub enum DEP_SYSTEM_POLICY_TYPE {DEPPolicyAlwaysOff = 0, DEPPolicyAlwaysOn = 1, DEPPolicyOptIn = 2, DEPPolicyOptOut = 3, DEPTotalPolicyCount = 4} pub use self::DEP_SYSTEM_POLICY_TYPE::{DEPPolicyAlwaysOff, DEPPolicyAlwaysOn, DEPPolicyOptIn, DEPPolicyOptOut, DEPTotalPolicyCount}; /* winbase.h:2264:14, winbase.h:2264:14, winbase.h:2264:14 */
#[cfg(feature="winapi_desktop")] pub type PFE_EXPORT_FUNC = extern "system" fn(*mut ::libc::c_uchar, *mut ::libc::c_void, ::libc::c_ulong) -> ::libc::c_ulong; /* winbase.h:2548:10, winbase.h:2548:10, winbase.h:2548:10 */
#[cfg(feature="winapi_desktop")] pub type PFE_IMPORT_FUNC = extern "system" fn(*mut ::libc::c_uchar, *mut ::libc::c_void, *mut ::libc::c_ulong) -> ::libc::c_ulong; /* winbase.h:2556:10, winbase.h:2556:10, winbase.h:2556:10 */
#[cfg(feature="winapi_desktop")] #[repr(C)] pub struct WIN32_STREAM_ID { dwStreamId: ::minwindef::DWORD, dwStreamAttributes: ::minwindef::DWORD, Size: ::winnt::LARGE_INTEGER, dwStreamNameSize: ::minwindef::DWORD, cStreamName: *mut [::winnt::WCHAR; 1] } /* winbase.h:2900:16, winbase.h:2900:16, winbase.h:2900:16 */
#[cfg(feature="winapi_desktop")] pub type LPWIN32_STREAM_ID = *mut ::winbase::WIN32_STREAM_ID; /* winbase.h:2906:21, winbase.h:2906:21, winbase.h:2906:21 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct STARTUPINFOEXA { StartupInfo: ::processthreadsapi::STARTUPINFOA, lpAttributeList: ::processthreadsapi::LPPROC_THREAD_ATTRIBUTE_LIST } /* winbase.h:2959:16, winbase.h:2959:16, winbase.h:2959:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub type LPSTARTUPINFOEXA = *mut ::winbase::STARTUPINFOEXA; /* winbase.h:2962:20, winbase.h:2962:20, winbase.h:2962:20 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct STARTUPINFOEXW { StartupInfo: ::processthreadsapi::STARTUPINFOW, lpAttributeList: ::processthreadsapi::LPPROC_THREAD_ATTRIBUTE_LIST } /* winbase.h:2963:16, winbase.h:2963:16, winbase.h:2963:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub type LPSTARTUPINFOEXW = *mut ::winbase::STARTUPINFOEXW; /* winbase.h:2966:20, winbase.h:2966:20, winbase.h:2966:20 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub type STARTUPINFOEX = ::winbase::STARTUPINFOEXW; /* winbase.h:2968:24, winbase.h:2968:24, winbase.h:2968:24 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub type LPSTARTUPINFOEX = ::winbase::LPSTARTUPINFOEXW; /* winbase.h:2969:26, winbase.h:2969:26, winbase.h:2969:26 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub enum PROC_THREAD_ATTRIBUTE_NUM {ProcThreadAttributeParentProcess = 0, ProcThreadAttributeHandleList = 2, ProcThreadAttributeGroupAffinity = 3, ProcThreadAttributePreferredNode = 4, ProcThreadAttributeIdealProcessor = 5, ProcThreadAttributeUmsThread = 6, ProcThreadAttributeMitigationPolicy = 7, ProcThreadAttributeSecurityCapabilities = 9, ProcThreadAttributeProtectionLevel = 11} pub use self::PROC_THREAD_ATTRIBUTE_NUM::{ProcThreadAttributeParentProcess, ProcThreadAttributeHandleList, ProcThreadAttributeGroupAffinity, ProcThreadAttributePreferredNode, ProcThreadAttributeIdealProcessor, ProcThreadAttributeUmsThread, ProcThreadAttributeMitigationPolicy, ProcThreadAttributeSecurityCapabilities, ProcThreadAttributeProtectionLevel}; /* winbase.h:3265:14, winbase.h:3265:14, winbase.h:3265:14 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub type PGET_SYSTEM_WOW64_DIRECTORY_A = extern "system" fn(*mut ::libc::c_schar, ::libc::c_uint) -> ::libc::c_uint; /* winbase.h:4494:23, winbase.h:4494:23, winbase.h:4494:23 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub type PGET_SYSTEM_WOW64_DIRECTORY_W = extern "system" fn(*mut ::libc::c_ushort, ::libc::c_uint) -> ::libc::c_uint; /* winbase.h:4495:23, winbase.h:4495:23, winbase.h:4495:23 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub type LPPROGRESS_ROUTINE = extern "system" fn(::winnt::LARGE_INTEGER, ::winnt::LARGE_INTEGER, ::winnt::LARGE_INTEGER, ::winnt::LARGE_INTEGER, ::libc::c_ulong, ::libc::c_ulong, *mut ::libc::c_void, *mut ::libc::c_void, *mut ::libc::c_void) -> ::libc::c_ulong; /* winbase.h:5091:10, winbase.h:5091:10, winbase.h:5091:10 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub enum COPYFILE2_MESSAGE_TYPE {COPYFILE2_CALLBACK_NONE = 0, COPYFILE2_CALLBACK_CHUNK_STARTED = 1, COPYFILE2_CALLBACK_CHUNK_FINISHED = 2, COPYFILE2_CALLBACK_STREAM_STARTED = 3, COPYFILE2_CALLBACK_STREAM_FINISHED = 4, COPYFILE2_CALLBACK_POLL_CONTINUE = 5, COPYFILE2_CALLBACK_ERROR = 6, COPYFILE2_CALLBACK_MAX = 7} pub use self::COPYFILE2_MESSAGE_TYPE::{COPYFILE2_CALLBACK_NONE, COPYFILE2_CALLBACK_CHUNK_STARTED, COPYFILE2_CALLBACK_CHUNK_FINISHED, COPYFILE2_CALLBACK_STREAM_STARTED, COPYFILE2_CALLBACK_STREAM_FINISHED, COPYFILE2_CALLBACK_POLL_CONTINUE, COPYFILE2_CALLBACK_ERROR, COPYFILE2_CALLBACK_MAX}; /* winbase.h:5179:14, winbase.h:5179:14, winbase.h:5179:14 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub enum COPYFILE2_MESSAGE_ACTION {COPYFILE2_PROGRESS_CONTINUE = 0, COPYFILE2_PROGRESS_CANCEL = 1, COPYFILE2_PROGRESS_STOP = 2, COPYFILE2_PROGRESS_QUIET = 3, COPYFILE2_PROGRESS_PAUSE = 4} pub use self::COPYFILE2_MESSAGE_ACTION::{COPYFILE2_PROGRESS_CONTINUE, COPYFILE2_PROGRESS_CANCEL, COPYFILE2_PROGRESS_STOP, COPYFILE2_PROGRESS_QUIET, COPYFILE2_PROGRESS_PAUSE}; /* winbase.h:5190:14, winbase.h:5190:14, winbase.h:5190:14 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub enum COPYFILE2_COPY_PHASE {COPYFILE2_PHASE_NONE = 0, COPYFILE2_PHASE_PREPARE_SOURCE = 1, COPYFILE2_PHASE_PREPARE_DEST = 2, COPYFILE2_PHASE_READ_SOURCE = 3, COPYFILE2_PHASE_WRITE_DESTINATION = 4, COPYFILE2_PHASE_SERVER_COPY = 5, COPYFILE2_PHASE_NAMEGRAFT_COPY = 6, COPYFILE2_PHASE_MAX = 7} pub use self::COPYFILE2_COPY_PHASE::{COPYFILE2_PHASE_NONE, COPYFILE2_PHASE_PREPARE_SOURCE, COPYFILE2_PHASE_PREPARE_DEST, COPYFILE2_PHASE_READ_SOURCE, COPYFILE2_PHASE_WRITE_DESTINATION, COPYFILE2_PHASE_SERVER_COPY, COPYFILE2_PHASE_NAMEGRAFT_COPY, COPYFILE2_PHASE_MAX}; /* winbase.h:5198:14, winbase.h:5198:14, winbase.h:5198:14 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub struct COPYFILE2_MESSAGE { Type: ::winbase::COPYFILE2_MESSAGE_TYPE, dwPadding: ::minwindef::DWORD, Info: ::winbase::COPYFILE2_MESSAGE_Child_2 } /* winbase.h:5212:16, winbase.h:5212:16, winbase.h:5212:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub /*union*/ struct COPYFILE2_MESSAGE_Child_2; /* STUB! */ /* winbase.h:5217:5, winbase.h:5217:5, winbase.h:5217:5 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06010000"))] pub type PCOPYFILE2_PROGRESS_ROUTINE = extern "system" fn(*const ::winbase::COPYFILE2_MESSAGE, *mut ::libc::c_void) -> ::winbase::COPYFILE2_MESSAGE_ACTION; /* winbase.h:5284:37, winbase.h:5284:37, winbase.h:5284:37 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06010000"))] #[repr(C)] pub struct COPYFILE2_EXTENDED_PARAMETERS { dwSize: ::minwindef::DWORD, dwCopyFlags: ::minwindef::DWORD, pfCancel: *mut ::libc::c_int, pProgressRoutine: ::winbase::PCOPYFILE2_PROGRESS_ROUTINE, pvCallbackContext: ::winnt::PVOID } /* winbase.h:5289:16, winbase.h:5289:16, winbase.h:5289:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] #[repr(C)] pub enum STREAM_INFO_LEVELS {FindStreamInfoStandard = 0, FindStreamInfoMaxInfoLevel = 1} pub use self::STREAM_INFO_LEVELS::{FindStreamInfoStandard, FindStreamInfoMaxInfoLevel}; /* winbase.h:5569:14, winbase.h:5569:14, winbase.h:5569:14 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] #[repr(C)] pub struct WIN32_FIND_STREAM_DATA { StreamSize: ::winnt::LARGE_INTEGER, cStreamName: *mut [::winnt::WCHAR; 296] } /* winbase.h:5576:16, winbase.h:5576:16, winbase.h:5576:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub type PWIN32_FIND_STREAM_DATA = *mut ::winbase::WIN32_FIND_STREAM_DATA; /* winbase.h:5581:28, winbase.h:5581:28, winbase.h:5581:28 */
#[cfg(feature="winapi_desktop")] #[repr(C)] pub struct EVENTLOG_FULL_INFORMATION { dwFull: ::minwindef::DWORD } /* winbase.h:6077:16, winbase.h:6077:16, winbase.h:6077:16 */
#[cfg(feature="winapi_desktop")] pub type LPEVENTLOG_FULL_INFORMATION = *mut ::winbase::EVENTLOG_FULL_INFORMATION; /* winbase.h:6081:29, winbase.h:6081:29, winbase.h:6081:29 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] pub type OPERATION_ID = ::minwindef::ULONG; /* winbase.h:6101:15, winbase.h:6101:15, winbase.h:6101:15 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] #[repr(C)] pub struct OPERATION_START_PARAMETERS { Version: ::minwindef::ULONG, OperationId: ::winbase::OPERATION_ID, Flags: ::minwindef::ULONG } /* winbase.h:6107:16, winbase.h:6107:16, winbase.h:6107:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] pub type POPERATION_START_PARAMETERS = *mut ::winbase::OPERATION_START_PARAMETERS; /* winbase.h:6111:32, winbase.h:6111:32, winbase.h:6111:32 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] #[repr(C)] pub struct OPERATION_END_PARAMETERS { Version: ::minwindef::ULONG, OperationId: ::winbase::OPERATION_ID, Flags: ::minwindef::ULONG } /* winbase.h:6119:16, winbase.h:6119:16, winbase.h:6119:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] pub type POPERATION_END_PARAMETERS = *mut ::winbase::OPERATION_END_PARAMETERS; /* winbase.h:6123:30, winbase.h:6123:30, winbase.h:6123:30 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] #[repr(C)] pub struct HW_PROFILE_INFOA { dwDockInfo: ::minwindef::DWORD, szHwProfileGuid: *mut [::winnt::CHAR; 39], szHwProfileName: *mut [::winnt::CHAR; 80] } /* winbase.h:7290:16, winbase.h:7290:16, winbase.h:7290:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub type LPHW_PROFILE_INFOA = *mut ::winbase::HW_PROFILE_INFOA; /* winbase.h:7294:22, winbase.h:7294:22, winbase.h:7294:22 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] #[repr(C)] pub struct HW_PROFILE_INFOW { dwDockInfo: ::minwindef::DWORD, szHwProfileGuid: *mut [::winnt::WCHAR; 39], szHwProfileName: *mut [::winnt::WCHAR; 80] } /* winbase.h:7295:16, winbase.h:7295:16, winbase.h:7295:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub type LPHW_PROFILE_INFOW = *mut ::winbase::HW_PROFILE_INFOW; /* winbase.h:7299:22, winbase.h:7299:22, winbase.h:7299:22 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub type HW_PROFILE_INFO = ::winbase::HW_PROFILE_INFOW; /* winbase.h:7301:26, winbase.h:7301:26, winbase.h:7301:26 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub type LPHW_PROFILE_INFO = ::winbase::LPHW_PROFILE_INFOW; /* winbase.h:7302:28, winbase.h:7302:28, winbase.h:7302:28 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] #[repr(C)] pub struct SYSTEM_POWER_STATUS { ACLineStatus: ::minwindef::BYTE, BatteryFlag: ::minwindef::BYTE, BatteryLifePercent: ::minwindef::BYTE, Reserved1: ::minwindef::BYTE, BatteryLifeTime: ::minwindef::DWORD, BatteryFullLifeTime: ::minwindef::DWORD } /* winbase.h:7392:16, winbase.h:7392:16, winbase.h:7392:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub type LPSYSTEM_POWER_STATUS = *mut ::winbase::SYSTEM_POWER_STATUS; /* winbase.h:7399:27, winbase.h:7399:27, winbase.h:7399:27 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[repr(C)] pub struct ACTCTXA { cbSize: ::minwindef::ULONG, dwFlags: ::minwindef::DWORD, lpSource: ::winnt::LPCSTR, wProcessorArchitecture: ::minwindef::USHORT, wLangId: ::winnt::LANGID, lpAssemblyDirectory: ::winnt::LPCSTR, lpResourceName: ::winnt::LPCSTR, lpApplicationName: ::winnt::LPCSTR, hModule: ::minwindef::HMODULE } /* winbase.h:7682:16, winbase.h:7682:16, winbase.h:7682:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PACTCTXA = *mut ::winbase::ACTCTXA; /* winbase.h:7692:13, winbase.h:7692:13, winbase.h:7692:13 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[repr(C)] pub struct ACTCTXW { cbSize: ::minwindef::ULONG, dwFlags: ::minwindef::DWORD, lpSource: ::winnt::LPCWSTR, wProcessorArchitecture: ::minwindef::USHORT, wLangId: ::winnt::LANGID, lpAssemblyDirectory: ::winnt::LPCWSTR, lpResourceName: ::winnt::LPCWSTR, lpApplicationName: ::winnt::LPCWSTR, hModule: ::minwindef::HMODULE } /* winbase.h:7693:16, winbase.h:7693:16, winbase.h:7693:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PACTCTXW = *mut ::winbase::ACTCTXW; /* winbase.h:7703:13, winbase.h:7703:13, winbase.h:7703:13 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type ACTCTX = ::winbase::ACTCTXW; /* winbase.h:7705:17, winbase.h:7705:17, winbase.h:7705:17 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PACTCTX = ::winbase::PACTCTXW; /* winbase.h:7706:18, winbase.h:7706:18, winbase.h:7706:18 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PCACTCTXA = *const ::winbase::ACTCTXA; /* winbase.h:7712:24, winbase.h:7712:24, winbase.h:7712:24 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PCACTCTXW = *const ::winbase::ACTCTXW; /* winbase.h:7713:24, winbase.h:7713:24, winbase.h:7713:24 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PCACTCTX = ::winbase::PCACTCTXW; /* winbase.h:7715:19, winbase.h:7715:19, winbase.h:7715:19 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[repr(C)] pub struct ACTCTX_SECTION_KEYED_DATA_2600 { cbSize: ::minwindef::ULONG, ulDataFormatVersion: ::minwindef::ULONG, lpData: ::winnt::PVOID, ulLength: ::minwindef::ULONG, lpSectionGlobalData: ::winnt::PVOID, ulSectionGlobalDataLength: ::minwindef::ULONG, lpSectionBase: ::winnt::PVOID, ulSectionTotalLength: ::minwindef::ULONG, hActCtx: ::winnt::HANDLE, ulAssemblyRosterIndex: ::minwindef::ULONG } /* winbase.h:7791:16, winbase.h:7791:16, winbase.h:7791:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PACTCTX_SECTION_KEYED_DATA_2600 = *mut ::winbase::ACTCTX_SECTION_KEYED_DATA_2600; /* winbase.h:7802:36, winbase.h:7802:36, winbase.h:7802:36 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PCACTCTX_SECTION_KEYED_DATA_2600 = *const ::winbase::ACTCTX_SECTION_KEYED_DATA_2600; /* winbase.h:7803:48, winbase.h:7803:48, winbase.h:7803:48 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[repr(C)] pub struct ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA { lpInformation: ::winnt::PVOID, lpSectionBase: ::winnt::PVOID, ulSectionLength: ::minwindef::ULONG, lpSectionGlobalDataBase: ::winnt::PVOID, ulSectionGlobalDataLength: ::minwindef::ULONG } /* winbase.h:7805:16, winbase.h:7805:16, winbase.h:7805:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = *mut ::winbase::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; /* winbase.h:7811:49, winbase.h:7811:49, winbase.h:7811:49 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = *const ::winbase::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; /* winbase.h:7812:60, winbase.h:7812:60, winbase.h:7812:60 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[repr(C)] pub struct ACTCTX_SECTION_KEYED_DATA { cbSize: ::minwindef::ULONG, ulDataFormatVersion: ::minwindef::ULONG, lpData: ::winnt::PVOID, ulLength: ::minwindef::ULONG, lpSectionGlobalData: ::winnt::PVOID, ulSectionGlobalDataLength: ::minwindef::ULONG, lpSectionBase: ::winnt::PVOID, ulSectionTotalLength: ::minwindef::ULONG, hActCtx: ::winnt::HANDLE, ulAssemblyRosterIndex: ::minwindef::ULONG, ulFlags: ::minwindef::ULONG, AssemblyMetadata: ::winbase::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA } /* winbase.h:7814:16, winbase.h:7814:16, winbase.h:7814:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PACTCTX_SECTION_KEYED_DATA = *mut ::winbase::ACTCTX_SECTION_KEYED_DATA; /* winbase.h:7828:31, winbase.h:7828:31, winbase.h:7828:31 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PCACTCTX_SECTION_KEYED_DATA = *const ::winbase::ACTCTX_SECTION_KEYED_DATA; /* winbase.h:7829:43, winbase.h:7829:43, winbase.h:7829:43 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[repr(C)] pub struct ACTIVATION_CONTEXT_BASIC_INFORMATION { hActCtx: ::winnt::HANDLE, dwFlags: ::minwindef::DWORD } /* winbase.h:7880:16, winbase.h:7880:16, winbase.h:7880:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PACTIVATION_CONTEXT_BASIC_INFORMATION = *mut ::winbase::ACTIVATION_CONTEXT_BASIC_INFORMATION; /* winbase.h:7883:42, winbase.h:7883:42, winbase.h:7883:42 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub type PCACTIVATION_CONTEXT_BASIC_INFORMATION = *const ::winbase::ACTIVATION_CONTEXT_BASIC_INFORMATION; /* winbase.h:7885:61, winbase.h:7885:61, winbase.h:7885:61 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[cfg(any(target_arch="x86", target_arch="arm"))] pub type PQUERYACTCTXW_FUNC = extern "system" fn(::libc::c_ulong, *mut ::libc::c_void, *mut ::libc::c_void, ::libc::c_ulong, *mut ::libc::c_void, ::libc::c_ulong, *mut ::libc::c_ulong) -> ::libc::c_int; /* winbase.h:7941:42, winbase.h:7941:42 */
#[cfg(feature="winapi_desktop")] pub type APPLICATION_RECOVERY_CALLBACK = extern "system" fn(*mut ::libc::c_void) -> ::libc::c_ulong; /* winbase.h:8088:24, winbase.h:8088:24, winbase.h:8088:24 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_BASIC_INFO { CreationTime: ::winnt::LARGE_INTEGER, LastAccessTime: ::winnt::LARGE_INTEGER, LastWriteTime: ::winnt::LARGE_INTEGER, ChangeTime: ::winnt::LARGE_INTEGER, FileAttributes: ::minwindef::DWORD } /* winbase.h:8193:16, winbase.h:8193:16, winbase.h:8193:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_BASIC_INFO = *mut ::winbase::FILE_BASIC_INFO; /* winbase.h:8199:21, winbase.h:8199:21, winbase.h:8199:21 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_STANDARD_INFO { AllocationSize: ::winnt::LARGE_INTEGER, EndOfFile: ::winnt::LARGE_INTEGER, NumberOfLinks: ::minwindef::DWORD, DeletePending: ::winnt::BOOLEAN, Directory: ::winnt::BOOLEAN } /* winbase.h:8201:16, winbase.h:8201:16, winbase.h:8201:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_STANDARD_INFO = *mut ::winbase::FILE_STANDARD_INFO; /* winbase.h:8207:24, winbase.h:8207:24, winbase.h:8207:24 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_NAME_INFO { FileNameLength: ::minwindef::DWORD, FileName: *mut [::winnt::WCHAR; 1] } /* winbase.h:8209:16, winbase.h:8209:16, winbase.h:8209:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_NAME_INFO = *mut ::winbase::FILE_NAME_INFO; /* winbase.h:8212:20, winbase.h:8212:20, winbase.h:8212:20 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_RENAME_INFO { ReplaceIfExists: ::winnt::BOOLEAN, RootDirectory: ::winnt::HANDLE, FileNameLength: ::minwindef::DWORD, FileName: *mut [::winnt::WCHAR; 1] } /* winbase.h:8214:16, winbase.h:8214:16, winbase.h:8214:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_RENAME_INFO = *mut ::winbase::FILE_RENAME_INFO; /* winbase.h:8219:22, winbase.h:8219:22, winbase.h:8219:22 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_ALLOCATION_INFO { AllocationSize: ::winnt::LARGE_INTEGER } /* winbase.h:8221:16, winbase.h:8221:16, winbase.h:8221:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_ALLOCATION_INFO = *mut ::winbase::FILE_ALLOCATION_INFO; /* winbase.h:8223:26, winbase.h:8223:26, winbase.h:8223:26 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_END_OF_FILE_INFO { EndOfFile: ::winnt::LARGE_INTEGER } /* winbase.h:8225:16, winbase.h:8225:16, winbase.h:8225:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_END_OF_FILE_INFO = *mut ::winbase::FILE_END_OF_FILE_INFO; /* winbase.h:8227:27, winbase.h:8227:27, winbase.h:8227:27 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_STREAM_INFO { NextEntryOffset: ::minwindef::DWORD, StreamNameLength: ::minwindef::DWORD, StreamSize: ::winnt::LARGE_INTEGER, StreamAllocationSize: ::winnt::LARGE_INTEGER, StreamName: *mut [::winnt::WCHAR; 1] } /* winbase.h:8229:16, winbase.h:8229:16, winbase.h:8229:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_STREAM_INFO = *mut ::winbase::FILE_STREAM_INFO; /* winbase.h:8235:22, winbase.h:8235:22, winbase.h:8235:22 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_COMPRESSION_INFO { CompressedFileSize: ::winnt::LARGE_INTEGER, CompressionFormat: ::minwindef::WORD, CompressionUnitShift: ::minwindef::UCHAR, ChunkShift: ::minwindef::UCHAR, ClusterShift: ::minwindef::UCHAR, Reserved: *mut [::minwindef::UCHAR; 3] } /* winbase.h:8237:16, winbase.h:8237:16, winbase.h:8237:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_COMPRESSION_INFO = *mut ::winbase::FILE_COMPRESSION_INFO; /* winbase.h:8244:27, winbase.h:8244:27, winbase.h:8244:27 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_ATTRIBUTE_TAG_INFO { FileAttributes: ::minwindef::DWORD, ReparseTag: ::minwindef::DWORD } /* winbase.h:8246:16, winbase.h:8246:16, winbase.h:8246:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_ATTRIBUTE_TAG_INFO = *mut ::winbase::FILE_ATTRIBUTE_TAG_INFO; /* winbase.h:8249:29, winbase.h:8249:29, winbase.h:8249:29 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_DISPOSITION_INFO { DeleteFileW: ::winnt::BOOLEAN } /* winbase.h:8251:16, winbase.h:8251:16, winbase.h:8251:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_DISPOSITION_INFO = *mut ::winbase::FILE_DISPOSITION_INFO; /* winbase.h:8253:27, winbase.h:8253:27, winbase.h:8253:27 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_ID_BOTH_DIR_INFO { NextEntryOffset: ::minwindef::DWORD, FileIndex: ::minwindef::DWORD, CreationTime: ::winnt::LARGE_INTEGER, LastAccessTime: ::winnt::LARGE_INTEGER, LastWriteTime: ::winnt::LARGE_INTEGER, ChangeTime: ::winnt::LARGE_INTEGER, EndOfFile: ::winnt::LARGE_INTEGER, AllocationSize: ::winnt::LARGE_INTEGER, FileAttributes: ::minwindef::DWORD, FileNameLength: ::minwindef::DWORD, EaSize: ::minwindef::DWORD, ShortNameLength: ::winnt::CCHAR, ShortName: *mut [::winnt::WCHAR; 12], FileId: ::winnt::LARGE_INTEGER, FileName: *mut [::winnt::WCHAR; 1] } /* winbase.h:8255:16, winbase.h:8255:16, winbase.h:8255:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_ID_BOTH_DIR_INFO = *mut ::winbase::FILE_ID_BOTH_DIR_INFO; /* winbase.h:8271:27, winbase.h:8271:27, winbase.h:8271:27 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_FULL_DIR_INFO { NextEntryOffset: ::minwindef::ULONG, FileIndex: ::minwindef::ULONG, CreationTime: ::winnt::LARGE_INTEGER, LastAccessTime: ::winnt::LARGE_INTEGER, LastWriteTime: ::winnt::LARGE_INTEGER, ChangeTime: ::winnt::LARGE_INTEGER, EndOfFile: ::winnt::LARGE_INTEGER, AllocationSize: ::winnt::LARGE_INTEGER, FileAttributes: ::minwindef::ULONG, FileNameLength: ::minwindef::ULONG, EaSize: ::minwindef::ULONG, FileName: *mut [::winnt::WCHAR; 1] } /* winbase.h:8273:16, winbase.h:8273:16, winbase.h:8273:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_FULL_DIR_INFO = *mut ::winbase::FILE_FULL_DIR_INFO; /* winbase.h:8286:24, winbase.h:8286:24, winbase.h:8286:24 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub enum PRIORITY_HINT {IoPriorityHintVeryLow = 0, IoPriorityHintLow = 1, IoPriorityHintNormal = 2, MaximumIoPriorityHintType = 3} pub use self::PRIORITY_HINT::{IoPriorityHintVeryLow, IoPriorityHintLow, IoPriorityHintNormal, MaximumIoPriorityHintType}; /* winbase.h:8288:14, winbase.h:8288:14, winbase.h:8288:14 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_IO_PRIORITY_HINT_INFO { PriorityHint: ::winbase::PRIORITY_HINT } /* winbase.h:8295:16, winbase.h:8295:16, winbase.h:8295:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_IO_PRIORITY_HINT_INFO = *mut ::winbase::FILE_IO_PRIORITY_HINT_INFO; /* winbase.h:8297:32, winbase.h:8297:32, winbase.h:8297:32 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] #[repr(C)] pub struct FILE_ALIGNMENT_INFO { AlignmentRequirement: ::minwindef::ULONG } /* winbase.h:8303:16, winbase.h:8303:16, winbase.h:8303:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub type PFILE_ALIGNMENT_INFO = *mut ::winbase::FILE_ALIGNMENT_INFO; /* winbase.h:8305:25, winbase.h:8305:25, winbase.h:8305:25 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] #[repr(C)] pub struct FILE_STORAGE_INFO { LogicalBytesPerSector: ::minwindef::ULONG, PhysicalBytesPerSectorForAtomicity: ::minwindef::ULONG, PhysicalBytesPerSectorForPerformance: ::minwindef::ULONG, FileSystemEffectivePhysicalBytesPerSectorForAtomicity: ::minwindef::ULONG, Flags: ::minwindef::ULONG, ByteOffsetForSectorAlignment: ::minwindef::ULONG, ByteOffsetForPartitionAlignment: ::minwindef::ULONG } /* winbase.h:8326:16, winbase.h:8326:16, winbase.h:8326:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub type PFILE_STORAGE_INFO = *mut ::winbase::FILE_STORAGE_INFO; /* winbase.h:8334:23, winbase.h:8334:23, winbase.h:8334:23 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] #[repr(C)] pub struct FILE_ID_INFO { VolumeSerialNumber: ::winnt::ULONGLONG, FileId: ::winnt::FILE_ID_128 } /* winbase.h:8339:16, winbase.h:8339:16, winbase.h:8339:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub type PFILE_ID_INFO = *mut ::winbase::FILE_ID_INFO; /* winbase.h:8342:18, winbase.h:8342:18, winbase.h:8342:18 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] #[repr(C)] pub struct FILE_ID_EXTD_DIR_INFO { NextEntryOffset: ::minwindef::ULONG, FileIndex: ::minwindef::ULONG, CreationTime: ::winnt::LARGE_INTEGER, LastAccessTime: ::winnt::LARGE_INTEGER, LastWriteTime: ::winnt::LARGE_INTEGER, ChangeTime: ::winnt::LARGE_INTEGER, EndOfFile: ::winnt::LARGE_INTEGER, AllocationSize: ::winnt::LARGE_INTEGER, FileAttributes: ::minwindef::ULONG, FileNameLength: ::minwindef::ULONG, EaSize: ::minwindef::ULONG, ReparsePointTag: ::minwindef::ULONG, FileId: ::winnt::FILE_ID_128, FileName: *mut [::winnt::WCHAR; 1] } /* winbase.h:8347:16, winbase.h:8347:16, winbase.h:8347:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub type PFILE_ID_EXTD_DIR_INFO = *mut ::winbase::FILE_ID_EXTD_DIR_INFO; /* winbase.h:8362:27, winbase.h:8362:27, winbase.h:8362:27 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_REMOTE_PROTOCOL_INFO { StructureVersion: ::minwindef::USHORT, StructureSize: ::minwindef::USHORT, Protocol: ::minwindef::ULONG, ProtocolMajorVersion: ::minwindef::USHORT, ProtocolMinorVersion: ::minwindef::USHORT, ProtocolRevision: ::minwindef::USHORT, Reserved: ::minwindef::USHORT, Flags: ::minwindef::ULONG, GenericReserved: ::winbase::FILE_REMOTE_PROTOCOL_INFO_Child_8, ProtocolSpecific: ::winbase::FILE_REMOTE_PROTOCOL_INFO_Child_10 } /* winbase.h:8400:16, winbase.h:8400:16, winbase.h:8400:16 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_REMOTE_PROTOCOL_INFO_Child_8 { Reserved: *mut [::minwindef::ULONG; 8] } /* winbase.h:8418:5, winbase.h:8418:5, winbase.h:8418:5 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub /*union*/ struct FILE_REMOTE_PROTOCOL_INFO_Child_10; /* STUB! */ /* winbase.h:8429:5, winbase.h:8429:5, winbase.h:8429:5 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_REMOTE_PROTOCOL_INFO = *mut ::winbase::FILE_REMOTE_PROTOCOL_INFO; /* winbase.h:8450:31, winbase.h:8450:31, winbase.h:8450:31 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub enum FILE_ID_TYPE {FileIdType = 0, ObjectIdType = 1, ExtendedFileIdType = 2, MaximumFileIdType = 3} pub use self::FILE_ID_TYPE::{FileIdType, ObjectIdType, ExtendedFileIdType, MaximumFileIdType}; /* winbase.h:8468:14, winbase.h:8468:14, winbase.h:8468:14 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub type PFILE_ID_TYPE = *mut ::winbase::FILE_ID_TYPE; /* winbase.h:8473:18, winbase.h:8473:18, winbase.h:8473:18 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub struct FILE_ID_DESCRIPTOR { dwSize: ::minwindef::DWORD, Type: ::winbase::FILE_ID_TYPE, u: ::winbase::FILE_ID_DESCRIPTOR_Child_2 } /* winbase.h:8475:16, winbase.h:8475:16, winbase.h:8475:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] #[repr(C)] pub /*union*/ struct FILE_ID_DESCRIPTOR_Child_2; /* STUB! */ /* winbase.h:8478:5, winbase.h:8478:5, winbase.h:8478:5 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub type LPFILE_ID_DESCRIPTOR = *mut ::winbase::FILE_ID_DESCRIPTOR; /* winbase.h:8485:24, winbase.h:8485:24, winbase.h:8485:24 */
/* #[cfg(feature="winapi_app")] // #define LockSegment(w) Call { subject: Ident("GlobalFix"), args: [] } */ /* winbase.h:80:9, winbase.h:80:9, winbase.h:80:9 */
/* #[cfg(feature="winapi_app")] // #define UnlockSegment(w) Call { subject: Ident("GlobalUnfix"), args: [] } */ /* winbase.h:81:9, winbase.h:81:9, winbase.h:81:9 */
/* #[cfg(feature="winapi_desktop")] // #define GetCurrentTime() Call { subject: Ident("GetTickCount"), args: [] } */ /* winbase.h:89:9, winbase.h:89:9, winbase.h:89:9 */
#[cfg(feature="winapi_app")] pub const FILE_BEGIN: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:99:9, winbase.h:99:9, winbase.h:99:9 */
#[cfg(feature="winapi_app")] pub const FILE_CURRENT: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:100:9, winbase.h:100:9, winbase.h:100:9 */
#[cfg(feature="winapi_app")] pub const FILE_END: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:101:9, winbase.h:101:9, winbase.h:101:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_WRITE_THROUGH: i32 = 0x80000000i32; /* Integer(2147483648, Yes, Unknown) */ /* winbase.h:123:9, winbase.h:123:9, winbase.h:123:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_OVERLAPPED: i32 = 0x40000000i32; /* Integer(1073741824, Yes, Unknown) */ /* winbase.h:124:9, winbase.h:124:9, winbase.h:124:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_NO_BUFFERING: i32 = 0x20000000i32; /* Integer(536870912, Yes, Unknown) */ /* winbase.h:125:9, winbase.h:125:9, winbase.h:125:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_RANDOM_ACCESS: i32 = 0x10000000i32; /* Integer(268435456, Yes, Unknown) */ /* winbase.h:126:9, winbase.h:126:9, winbase.h:126:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_SEQUENTIAL_SCAN: i32 = 0x8000000i32; /* Integer(134217728, Yes, Unknown) */ /* winbase.h:127:9, winbase.h:127:9, winbase.h:127:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_DELETE_ON_CLOSE: i32 = 0x4000000i32; /* Integer(67108864, Yes, Unknown) */ /* winbase.h:128:9, winbase.h:128:9, winbase.h:128:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_BACKUP_SEMANTICS: i32 = 0x2000000i32; /* Integer(33554432, Yes, Unknown) */ /* winbase.h:129:9, winbase.h:129:9, winbase.h:129:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_POSIX_SEMANTICS: i32 = 0x1000000i32; /* Integer(16777216, Yes, Unknown) */ /* winbase.h:130:9, winbase.h:130:9, winbase.h:130:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_SESSION_AWARE: i32 = 0x800000i32; /* Integer(8388608, Yes, Unknown) */ /* winbase.h:131:9, winbase.h:131:9, winbase.h:131:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_OPEN_REPARSE_POINT: i32 = 0x200000i32; /* Integer(2097152, Yes, Unknown) */ /* winbase.h:132:9, winbase.h:132:9, winbase.h:132:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_OPEN_NO_RECALL: i32 = 0x100000i32; /* Integer(1048576, Yes, Unknown) */ /* winbase.h:133:9, winbase.h:133:9, winbase.h:133:9 */
#[cfg(feature="winapi_app")] pub const FILE_FLAG_FIRST_PIPE_INSTANCE: i32 = 0x80000i32; /* Integer(524288, Yes, Unknown) */ /* winbase.h:134:9, winbase.h:134:9, winbase.h:134:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const FILE_FLAG_OPEN_REQUIRING_OPLOCK: i32 = 0x40000i32; /* Integer(262144, Yes, Unknown) */ /* winbase.h:147:9, winbase.h:147:9, winbase.h:147:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const PROGRESS_CONTINUE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:158:9, winbase.h:158:9, winbase.h:158:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const PROGRESS_CANCEL: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:159:9, winbase.h:159:9, winbase.h:159:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const PROGRESS_STOP: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:160:9, winbase.h:160:9, winbase.h:160:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const PROGRESS_QUIET: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:161:9, winbase.h:161:9, winbase.h:161:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const CALLBACK_CHUNK_FINISHED: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:167:9, winbase.h:167:9, winbase.h:167:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const CALLBACK_STREAM_SWITCH: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:168:9, winbase.h:168:9, winbase.h:168:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const COPY_FILE_FAIL_IF_EXISTS: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:174:9, winbase.h:174:9, winbase.h:174:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const COPY_FILE_RESTARTABLE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:175:9, winbase.h:175:9, winbase.h:175:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const COPY_FILE_OPEN_SOURCE_FOR_WRITE: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:176:9, winbase.h:176:9, winbase.h:176:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const COPY_FILE_ALLOW_DECRYPTED_DESTINATION: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:177:9, winbase.h:177:9, winbase.h:177:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub const COPY_FILE_COPY_SYMLINK: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* winbase.h:184:9, winbase.h:184:9, winbase.h:184:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub const COPY_FILE_NO_BUFFERING: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:185:9, winbase.h:185:9, winbase.h:185:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const COPY_FILE_REQUEST_SECURITY_PRIVILEGES: i32 = 0x2000i32; /* Integer(8192, Yes, Unknown) */ /* winbase.h:195:9, winbase.h:195:9, winbase.h:195:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const COPY_FILE_RESUME_FROM_PAUSE: i32 = 0x4000i32; /* Integer(16384, Yes, Unknown) */ /* winbase.h:196:9, winbase.h:196:9, winbase.h:196:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const COPY_FILE_NO_OFFLOAD: i32 = 0x40000i32; /* Integer(262144, Yes, Unknown) */ /* winbase.h:199:9, winbase.h:199:9, winbase.h:199:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_05000000"))] pub const REPLACEFILE_WRITE_THROUGH: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:210:9, winbase.h:210:9, winbase.h:210:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_05000000"))] pub const REPLACEFILE_IGNORE_MERGE_ERRORS: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:211:9, winbase.h:211:9, winbase.h:211:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub const REPLACEFILE_IGNORE_ACL_ERRORS: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:214:9, winbase.h:214:9, winbase.h:214:9 */
#[cfg(feature="winapi_app")] pub const PIPE_ACCESS_INBOUND: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:228:9, winbase.h:228:9, winbase.h:228:9 */
#[cfg(feature="winapi_app")] pub const PIPE_ACCESS_OUTBOUND: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:229:9, winbase.h:229:9, winbase.h:229:9 */
#[cfg(feature="winapi_app")] pub const PIPE_ACCESS_DUPLEX: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:230:9, winbase.h:230:9, winbase.h:230:9 */
#[cfg(feature="winapi_app")] pub const PIPE_CLIENT_END: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:236:9, winbase.h:236:9, winbase.h:236:9 */
#[cfg(feature="winapi_app")] pub const PIPE_SERVER_END: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:237:9, winbase.h:237:9, winbase.h:237:9 */
#[cfg(feature="winapi_app")] pub const PIPE_WAIT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:243:9, winbase.h:243:9, winbase.h:243:9 */
#[cfg(feature="winapi_app")] pub const PIPE_NOWAIT: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:244:9, winbase.h:244:9, winbase.h:244:9 */
#[cfg(feature="winapi_app")] pub const PIPE_READMODE_BYTE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:245:9, winbase.h:245:9, winbase.h:245:9 */
#[cfg(feature="winapi_app")] pub const PIPE_READMODE_MESSAGE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:246:9, winbase.h:246:9, winbase.h:246:9 */
#[cfg(feature="winapi_app")] pub const PIPE_TYPE_BYTE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:247:9, winbase.h:247:9, winbase.h:247:9 */
#[cfg(feature="winapi_app")] pub const PIPE_TYPE_MESSAGE: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:248:9, winbase.h:248:9, winbase.h:248:9 */
#[cfg(feature="winapi_app")] pub const PIPE_ACCEPT_REMOTE_CLIENTS: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:249:9, winbase.h:249:9, winbase.h:249:9 */
#[cfg(feature="winapi_app")] pub const PIPE_REJECT_REMOTE_CLIENTS: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:250:9, winbase.h:250:9, winbase.h:250:9 */
#[cfg(feature="winapi_app")] pub const PIPE_UNLIMITED_INSTANCES: i32 = 0xffi32; /* Integer(255, Yes, Unknown) */ /* winbase.h:256:9, winbase.h:256:9, winbase.h:256:9 */
#[cfg(feature="winapi_app")] pub const SECURITY_CONTEXT_TRACKING: i32 = 0x40000i32; /* Integer(262144, Yes, Unknown) */ /* winbase.h:268:9, winbase.h:268:9, winbase.h:268:9 */
#[cfg(feature="winapi_app")] pub const SECURITY_EFFECTIVE_ONLY: i32 = 0x80000i32; /* Integer(524288, Yes, Unknown) */ /* winbase.h:269:9, winbase.h:269:9, winbase.h:269:9 */
#[cfg(feature="winapi_app")] pub const SECURITY_SQOS_PRESENT: i32 = 0x100000i32; /* Integer(1048576, Yes, Unknown) */ /* winbase.h:271:9, winbase.h:271:9, winbase.h:271:9 */
#[cfg(feature="winapi_app")] pub const SECURITY_VALID_SQOS_FLAGS: i32 = 0x1f0000i32; /* Integer(2031616, Yes, Unknown) */ /* winbase.h:272:9, winbase.h:272:9, winbase.h:272:9 */
#[cfg(feature="winapi_app")] pub const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:294:9, winbase.h:294:9, winbase.h:294:9 */
#[cfg(feature="winapi_app")] pub const FAIL_FAST_NO_HARD_ERROR_DLG: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:295:9, winbase.h:295:9, winbase.h:295:9 */
#[cfg(feature="winapi_app")] pub const DTR_CONTROL_DISABLE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:446:9, winbase.h:446:9, winbase.h:446:9 */
#[cfg(feature="winapi_app")] pub const DTR_CONTROL_ENABLE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:447:9, winbase.h:447:9, winbase.h:447:9 */
#[cfg(feature="winapi_app")] pub const DTR_CONTROL_HANDSHAKE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:448:9, winbase.h:448:9, winbase.h:448:9 */
#[cfg(feature="winapi_app")] pub const RTS_CONTROL_DISABLE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:453:9, winbase.h:453:9, winbase.h:453:9 */
#[cfg(feature="winapi_app")] pub const RTS_CONTROL_ENABLE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:454:9, winbase.h:454:9, winbase.h:454:9 */
#[cfg(feature="winapi_app")] pub const RTS_CONTROL_HANDSHAKE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:455:9, winbase.h:455:9, winbase.h:455:9 */
#[cfg(feature="winapi_app")] pub const RTS_CONTROL_TOGGLE: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:456:9, winbase.h:456:9, winbase.h:456:9 */
/* #[cfg(feature="winapi_app")] // #define FreeModule(hLibModule) Call { subject: Ident("FreeLibrary"), args: [] } */ /* winbase.h:514:9, winbase.h:514:9, winbase.h:514:9 */
#[cfg(feature="winapi_app")] pub const GMEM_FIXED: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:519:9, winbase.h:519:9, winbase.h:519:9 */
#[cfg(feature="winapi_app")] pub const GMEM_MOVEABLE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:520:9, winbase.h:520:9, winbase.h:520:9 */
#[cfg(feature="winapi_app")] pub const GMEM_NOCOMPACT: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:521:9, winbase.h:521:9, winbase.h:521:9 */
#[cfg(feature="winapi_app")] pub const GMEM_NODISCARD: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:522:9, winbase.h:522:9, winbase.h:522:9 */
#[cfg(feature="winapi_app")] pub const GMEM_ZEROINIT: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* winbase.h:523:9, winbase.h:523:9, winbase.h:523:9 */
#[cfg(feature="winapi_app")] pub const GMEM_MODIFY: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* winbase.h:524:9, winbase.h:524:9, winbase.h:524:9 */
#[cfg(feature="winapi_app")] pub const GMEM_DISCARDABLE: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* winbase.h:525:9, winbase.h:525:9, winbase.h:525:9 */
#[cfg(feature="winapi_app")] pub const GMEM_NOT_BANKED: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:526:9, winbase.h:526:9, winbase.h:526:9 */
#[cfg(feature="winapi_app")] pub const GMEM_SHARE: i32 = 0x2000i32; /* Integer(8192, Yes, Unknown) */ /* winbase.h:527:9, winbase.h:527:9, winbase.h:527:9 */
#[cfg(feature="winapi_app")] pub const GMEM_DDESHARE: i32 = 0x2000i32; /* Integer(8192, Yes, Unknown) */ /* winbase.h:528:9, winbase.h:528:9, winbase.h:528:9 */
#[cfg(feature="winapi_app")] pub const GMEM_NOTIFY: i32 = 0x4000i32; /* Integer(16384, Yes, Unknown) */ /* winbase.h:529:9, winbase.h:529:9, winbase.h:529:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winbase::GMEM_NOT_BANKED as GMEM_LOWER; /* winbase.h:530:9, winbase.h:530:9, winbase.h:530:9 */
#[cfg(feature="winapi_app")] pub const GMEM_VALID_FLAGS: i32 = 0x7f72i32; /* Integer(32626, Yes, Unknown) */ /* winbase.h:531:9, winbase.h:531:9, winbase.h:531:9 */
#[cfg(feature="winapi_app")] pub const GMEM_INVALID_HANDLE: i32 = 0x8000i32; /* Integer(32768, Yes, Unknown) */ /* winbase.h:532:9, winbase.h:532:9, winbase.h:532:9 */
#[cfg(feature="winapi_app")] pub const GMEM_DISCARDED: i32 = 0x4000i32; /* Integer(16384, Yes, Unknown) */ /* winbase.h:542:9, winbase.h:542:9, winbase.h:542:9 */
#[cfg(feature="winapi_app")] pub const GMEM_LOCKCOUNT: i32 = 0xffi32; /* Integer(255, Yes, Unknown) */ /* winbase.h:543:9, winbase.h:543:9, winbase.h:543:9 */
#[cfg(feature="winapi_app")] pub const DEBUG_PROCESS: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:566:9, winbase.h:566:9, winbase.h:566:9 */
#[cfg(feature="winapi_app")] pub const DEBUG_ONLY_THIS_PROCESS: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:567:9, winbase.h:567:9, winbase.h:567:9 */
#[cfg(feature="winapi_app")] pub const CREATE_SUSPENDED: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:568:9, winbase.h:568:9, winbase.h:568:9 */
#[cfg(feature="winapi_app")] pub const DETACHED_PROCESS: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:569:9, winbase.h:569:9, winbase.h:569:9 */
#[cfg(feature="winapi_app")] pub const CREATE_NEW_CONSOLE: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:571:9, winbase.h:571:9, winbase.h:571:9 */
#[cfg(feature="winapi_app")] pub const NORMAL_PRIORITY_CLASS: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:572:9, winbase.h:572:9, winbase.h:572:9 */
#[cfg(feature="winapi_app")] pub const IDLE_PRIORITY_CLASS: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* winbase.h:573:9, winbase.h:573:9, winbase.h:573:9 */
#[cfg(feature="winapi_app")] pub const HIGH_PRIORITY_CLASS: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* winbase.h:574:9, winbase.h:574:9, winbase.h:574:9 */
#[cfg(feature="winapi_app")] pub const REALTIME_PRIORITY_CLASS: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* winbase.h:576:9, winbase.h:576:9, winbase.h:576:9 */
#[cfg(feature="winapi_app")] pub const CREATE_NEW_PROCESS_GROUP: i32 = 0x200i32; /* Integer(512, Yes, Unknown) */ /* winbase.h:577:9, winbase.h:577:9, winbase.h:577:9 */
#[cfg(feature="winapi_app")] pub const CREATE_UNICODE_ENVIRONMENT: i32 = 0x400i32; /* Integer(1024, Yes, Unknown) */ /* winbase.h:578:9, winbase.h:578:9, winbase.h:578:9 */
#[cfg(feature="winapi_app")] pub const CREATE_SEPARATE_WOW_VDM: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* winbase.h:579:9, winbase.h:579:9, winbase.h:579:9 */
#[cfg(feature="winapi_app")] pub const CREATE_SHARED_WOW_VDM: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:581:9, winbase.h:581:9, winbase.h:581:9 */
#[cfg(feature="winapi_app")] pub const CREATE_FORCEDOS: i32 = 0x2000i32; /* Integer(8192, Yes, Unknown) */ /* winbase.h:582:9, winbase.h:582:9, winbase.h:582:9 */
#[cfg(feature="winapi_app")] pub const BELOW_NORMAL_PRIORITY_CLASS: i32 = 0x4000i32; /* Integer(16384, Yes, Unknown) */ /* winbase.h:583:9, winbase.h:583:9, winbase.h:583:9 */
#[cfg(feature="winapi_app")] pub const ABOVE_NORMAL_PRIORITY_CLASS: i32 = 0x8000i32; /* Integer(32768, Yes, Unknown) */ /* winbase.h:584:9, winbase.h:584:9, winbase.h:584:9 */
#[cfg(feature="winapi_app")] pub const INHERIT_PARENT_AFFINITY: i32 = 0x10000i32; /* Integer(65536, Yes, Unknown) */ /* winbase.h:586:9, winbase.h:586:9, winbase.h:586:9 */
#[cfg(feature="winapi_app")] pub const INHERIT_CALLER_PRIORITY: i32 = 0x20000i32; /* Integer(131072, Yes, Unknown) */ /* winbase.h:587:9, winbase.h:587:9, winbase.h:587:9 */
#[cfg(feature="winapi_app")] pub const CREATE_PROTECTED_PROCESS: i32 = 0x40000i32; /* Integer(262144, Yes, Unknown) */ /* winbase.h:588:9, winbase.h:588:9, winbase.h:588:9 */
#[cfg(feature="winapi_app")] pub const EXTENDED_STARTUPINFO_PRESENT: i32 = 0x80000i32; /* Integer(524288, Yes, Unknown) */ /* winbase.h:589:9, winbase.h:589:9, winbase.h:589:9 */
#[cfg(feature="winapi_app")] pub const PROCESS_MODE_BACKGROUND_BEGIN: i32 = 0x100000i32; /* Integer(1048576, Yes, Unknown) */ /* winbase.h:591:9, winbase.h:591:9, winbase.h:591:9 */
#[cfg(feature="winapi_app")] pub const PROCESS_MODE_BACKGROUND_END: i32 = 0x200000i32; /* Integer(2097152, Yes, Unknown) */ /* winbase.h:592:9, winbase.h:592:9, winbase.h:592:9 */
#[cfg(feature="winapi_app")] pub const CREATE_BREAKAWAY_FROM_JOB: i32 = 0x1000000i32; /* Integer(16777216, Yes, Unknown) */ /* winbase.h:594:9, winbase.h:594:9, winbase.h:594:9 */
#[cfg(feature="winapi_app")] pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL: i32 = 0x2000000i32; /* Integer(33554432, Yes, Unknown) */ /* winbase.h:595:9, winbase.h:595:9, winbase.h:595:9 */
#[cfg(feature="winapi_app")] pub const CREATE_DEFAULT_ERROR_MODE: i32 = 0x4000000i32; /* Integer(67108864, Yes, Unknown) */ /* winbase.h:596:9, winbase.h:596:9, winbase.h:596:9 */
#[cfg(feature="winapi_app")] pub const CREATE_NO_WINDOW: i32 = 0x8000000i32; /* Integer(134217728, Yes, Unknown) */ /* winbase.h:597:9, winbase.h:597:9, winbase.h:597:9 */
#[cfg(feature="winapi_app")] pub const PROFILE_USER: i32 = 0x10000000i32; /* Integer(268435456, Yes, Unknown) */ /* winbase.h:599:9, winbase.h:599:9, winbase.h:599:9 */
#[cfg(feature="winapi_app")] pub const PROFILE_KERNEL: i32 = 0x20000000i32; /* Integer(536870912, Yes, Unknown) */ /* winbase.h:600:9, winbase.h:600:9, winbase.h:600:9 */
#[cfg(feature="winapi_app")] pub const PROFILE_SERVER: i32 = 0x40000000i32; /* Integer(1073741824, Yes, Unknown) */ /* winbase.h:601:9, winbase.h:601:9, winbase.h:601:9 */
#[cfg(feature="winapi_app")] pub const CREATE_IGNORE_SYSTEM_DEFAULT: i32 = 0x80000000i32; /* Integer(2147483648, Yes, Unknown) */ /* winbase.h:602:9, winbase.h:602:9, winbase.h:602:9 */
#[cfg(feature="winapi_app")] pub const STACK_SIZE_PARAM_IS_A_RESERVATION: i32 = 0x10000i32; /* Integer(65536, Yes, Unknown) */ /* winbase.h:610:9, winbase.h:610:9, winbase.h:610:9 */
#[cfg(feature="winapi_app")] pub const THREAD_PRIORITY_NORMAL: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:618:9, winbase.h:618:9, winbase.h:618:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::THREAD_BASE_PRIORITY_MAX as THREAD_PRIORITY_HIGHEST; /* winbase.h:619:9, winbase.h:619:9, winbase.h:619:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::THREAD_BASE_PRIORITY_LOWRT as THREAD_PRIORITY_TIME_CRITICAL; /* winbase.h:623:9, winbase.h:623:9, winbase.h:623:9 */
#[cfg(feature="winapi_app")] pub const THREAD_MODE_BACKGROUND_BEGIN: i32 = 0x10000i32; /* Integer(65536, Yes, Unknown) */ /* winbase.h:626:9, winbase.h:626:9, winbase.h:626:9 */
#[cfg(feature="winapi_app")] pub const THREAD_MODE_BACKGROUND_END: i32 = 0x20000i32; /* Integer(131072, Yes, Unknown) */ /* winbase.h:627:9, winbase.h:627:9, winbase.h:627:9 */
#[cfg(feature="winapi_app")] pub const VOLUME_NAME_DOS: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:633:9, winbase.h:633:9, winbase.h:633:9 */
#[cfg(feature="winapi_app")] pub const VOLUME_NAME_GUID: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:634:9, winbase.h:634:9, winbase.h:634:9 */
#[cfg(feature="winapi_app")] pub const VOLUME_NAME_NT: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:635:9, winbase.h:635:9, winbase.h:635:9 */
#[cfg(feature="winapi_app")] pub const VOLUME_NAME_NONE: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:636:9, winbase.h:636:9, winbase.h:636:9 */
#[cfg(feature="winapi_app")] pub const FILE_NAME_NORMALIZED: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:638:9, winbase.h:638:9, winbase.h:638:9 */
#[cfg(feature="winapi_app")] pub const FILE_NAME_OPENED: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:639:9, winbase.h:639:9, winbase.h:639:9 */
#[cfg(feature="winapi_app")] pub const DRIVE_UNKNOWN: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:664:9, winbase.h:664:9, winbase.h:664:9 */
#[cfg(feature="winapi_app")] pub const DRIVE_NO_ROOT_DIR: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:665:9, winbase.h:665:9, winbase.h:665:9 */
#[cfg(feature="winapi_app")] pub const DRIVE_REMOVABLE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:666:9, winbase.h:666:9, winbase.h:666:9 */
#[cfg(feature="winapi_app")] pub const DRIVE_FIXED: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:667:9, winbase.h:667:9, winbase.h:667:9 */
#[cfg(feature="winapi_app")] pub const DRIVE_REMOTE: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:668:9, winbase.h:668:9, winbase.h:668:9 */
#[cfg(feature="winapi_app")] pub const DRIVE_CDROM: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* winbase.h:669:9, winbase.h:669:9, winbase.h:669:9 */
#[cfg(feature="winapi_app")] pub const DRIVE_RAMDISK: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* winbase.h:670:9, winbase.h:670:9, winbase.h:670:9 */
#[cfg(feature="winapi_app")] pub const FILE_TYPE_UNKNOWN: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:680:9, winbase.h:680:9, winbase.h:680:9 */
#[cfg(feature="winapi_app")] pub const FILE_TYPE_DISK: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:681:9, winbase.h:681:9, winbase.h:681:9 */
#[cfg(feature="winapi_app")] pub const FILE_TYPE_CHAR: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:682:9, winbase.h:682:9, winbase.h:682:9 */
#[cfg(feature="winapi_app")] pub const FILE_TYPE_PIPE: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:683:9, winbase.h:683:9, winbase.h:683:9 */
#[cfg(feature="winapi_app")] pub const FILE_TYPE_REMOTE: i32 = 0x8000i32; /* Integer(32768, Yes, Unknown) */ /* winbase.h:684:9, winbase.h:684:9, winbase.h:684:9 */
#[cfg(feature="winapi_app")] pub const NOPARITY: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:691:9, winbase.h:691:9, winbase.h:691:9 */
#[cfg(feature="winapi_app")] pub const ODDPARITY: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:692:9, winbase.h:692:9, winbase.h:692:9 */
#[cfg(feature="winapi_app")] pub const EVENPARITY: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:693:9, winbase.h:693:9, winbase.h:693:9 */
#[cfg(feature="winapi_app")] pub const MARKPARITY: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:694:9, winbase.h:694:9, winbase.h:694:9 */
#[cfg(feature="winapi_app")] pub const SPACEPARITY: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:695:9, winbase.h:695:9, winbase.h:695:9 */
#[cfg(feature="winapi_app")] pub const ONESTOPBIT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:697:9, winbase.h:697:9, winbase.h:697:9 */
#[cfg(feature="winapi_app")] pub const ONE5STOPBITS: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:698:9, winbase.h:698:9, winbase.h:698:9 */
#[cfg(feature="winapi_app")] pub const TWOSTOPBITS: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:699:9, winbase.h:699:9, winbase.h:699:9 */
#[cfg(feature="winapi_app")] pub const IGNORE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:701:9, winbase.h:701:9, winbase.h:701:9 */
#[cfg(feature="winapi_app")] pub const INFINITE: i32 = 0xffffffffi32; /* Integer(4294967295, Yes, Unknown) */ /* winbase.h:702:9, winbase.h:702:9, winbase.h:702:9 */
#[cfg(feature="winapi_app")] pub const CBR_110: i32 = 0x6ei32; /* Integer(110, Yes, Unknown) */ /* winbase.h:708:9, winbase.h:708:9, winbase.h:708:9 */
#[cfg(feature="winapi_app")] pub const CBR_300: i32 = 0x12ci32; /* Integer(300, Yes, Unknown) */ /* winbase.h:709:9, winbase.h:709:9, winbase.h:709:9 */
#[cfg(feature="winapi_app")] pub const CBR_600: i32 = 0x258i32; /* Integer(600, Yes, Unknown) */ /* winbase.h:710:9, winbase.h:710:9, winbase.h:710:9 */
#[cfg(feature="winapi_app")] pub const CBR_1200: i32 = 0x4b0i32; /* Integer(1200, Yes, Unknown) */ /* winbase.h:711:9, winbase.h:711:9, winbase.h:711:9 */
#[cfg(feature="winapi_app")] pub const CBR_2400: i32 = 0x960i32; /* Integer(2400, Yes, Unknown) */ /* winbase.h:712:9, winbase.h:712:9, winbase.h:712:9 */
#[cfg(feature="winapi_app")] pub const CBR_4800: i32 = 0x12c0i32; /* Integer(4800, Yes, Unknown) */ /* winbase.h:713:9, winbase.h:713:9, winbase.h:713:9 */
#[cfg(feature="winapi_app")] pub const CBR_9600: i32 = 0x2580i32; /* Integer(9600, Yes, Unknown) */ /* winbase.h:714:9, winbase.h:714:9, winbase.h:714:9 */
#[cfg(feature="winapi_app")] pub const CBR_14400: i32 = 0x3840i32; /* Integer(14400, Yes, Unknown) */ /* winbase.h:715:9, winbase.h:715:9, winbase.h:715:9 */
#[cfg(feature="winapi_app")] pub const CBR_19200: i32 = 0x4b00i32; /* Integer(19200, Yes, Unknown) */ /* winbase.h:716:9, winbase.h:716:9, winbase.h:716:9 */
#[cfg(feature="winapi_app")] pub const CBR_38400: i32 = 0x9600i32; /* Integer(38400, Yes, Unknown) */ /* winbase.h:717:9, winbase.h:717:9, winbase.h:717:9 */
#[cfg(feature="winapi_app")] pub const CBR_56000: i32 = 0xdac0i32; /* Integer(56000, Yes, Unknown) */ /* winbase.h:718:9, winbase.h:718:9, winbase.h:718:9 */
#[cfg(feature="winapi_app")] pub const CBR_57600: i32 = 0xe100i32; /* Integer(57600, Yes, Unknown) */ /* winbase.h:719:9, winbase.h:719:9, winbase.h:719:9 */
#[cfg(feature="winapi_app")] pub const CBR_115200: i32 = 0x1c200i32; /* Integer(115200, Yes, Unknown) */ /* winbase.h:720:9, winbase.h:720:9, winbase.h:720:9 */
#[cfg(feature="winapi_app")] pub const CBR_128000: i32 = 0x1f400i32; /* Integer(128000, Yes, Unknown) */ /* winbase.h:721:9, winbase.h:721:9, winbase.h:721:9 */
#[cfg(feature="winapi_app")] pub const CBR_256000: i32 = 0x3e800i32; /* Integer(256000, Yes, Unknown) */ /* winbase.h:722:9, winbase.h:722:9, winbase.h:722:9 */
#[cfg(feature="winapi_app")] pub const CE_RXOVER: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:728:9, winbase.h:728:9, winbase.h:728:9 */
#[cfg(feature="winapi_app")] pub const CE_OVERRUN: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:729:9, winbase.h:729:9, winbase.h:729:9 */
#[cfg(feature="winapi_app")] pub const CE_RXPARITY: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:730:9, winbase.h:730:9, winbase.h:730:9 */
#[cfg(feature="winapi_app")] pub const CE_FRAME: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:731:9, winbase.h:731:9, winbase.h:731:9 */
#[cfg(feature="winapi_app")] pub const CE_BREAK: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:732:9, winbase.h:732:9, winbase.h:732:9 */
#[cfg(feature="winapi_app")] pub const CE_TXFULL: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* winbase.h:733:9, winbase.h:733:9, winbase.h:733:9 */
#[cfg(feature="winapi_app")] pub const CE_PTO: i32 = 0x200i32; /* Integer(512, Yes, Unknown) */ /* winbase.h:734:9, winbase.h:734:9, winbase.h:734:9 */
#[cfg(feature="winapi_app")] pub const CE_IOE: i32 = 0x400i32; /* Integer(1024, Yes, Unknown) */ /* winbase.h:735:9, winbase.h:735:9, winbase.h:735:9 */
#[cfg(feature="winapi_app")] pub const CE_DNS: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* winbase.h:736:9, winbase.h:736:9, winbase.h:736:9 */
#[cfg(feature="winapi_app")] pub const CE_OOP: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:737:9, winbase.h:737:9, winbase.h:737:9 */
#[cfg(feature="winapi_app")] pub const CE_MODE: i32 = 0x8000i32; /* Integer(32768, Yes, Unknown) */ /* winbase.h:738:9, winbase.h:738:9, winbase.h:738:9 */
#[cfg(feature="winapi_app")] pub const EV_RXCHAR: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:753:9, winbase.h:753:9, winbase.h:753:9 */
#[cfg(feature="winapi_app")] pub const EV_RXFLAG: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:754:9, winbase.h:754:9, winbase.h:754:9 */
#[cfg(feature="winapi_app")] pub const EV_TXEMPTY: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:755:9, winbase.h:755:9, winbase.h:755:9 */
#[cfg(feature="winapi_app")] pub const EV_CTS: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:756:9, winbase.h:756:9, winbase.h:756:9 */
#[cfg(feature="winapi_app")] pub const EV_DSR: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:757:9, winbase.h:757:9, winbase.h:757:9 */
#[cfg(feature="winapi_app")] pub const EV_RLSD: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:758:9, winbase.h:758:9, winbase.h:758:9 */
#[cfg(feature="winapi_app")] pub const EV_BREAK: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* winbase.h:759:9, winbase.h:759:9, winbase.h:759:9 */
#[cfg(feature="winapi_app")] pub const EV_ERR: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* winbase.h:760:9, winbase.h:760:9, winbase.h:760:9 */
#[cfg(feature="winapi_app")] pub const EV_RING: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* winbase.h:761:9, winbase.h:761:9, winbase.h:761:9 */
#[cfg(feature="winapi_app")] pub const EV_PERR: i32 = 0x200i32; /* Integer(512, Yes, Unknown) */ /* winbase.h:762:9, winbase.h:762:9, winbase.h:762:9 */
#[cfg(feature="winapi_app")] pub const EV_RX80FULL: i32 = 0x400i32; /* Integer(1024, Yes, Unknown) */ /* winbase.h:763:9, winbase.h:763:9, winbase.h:763:9 */
#[cfg(feature="winapi_app")] pub const EV_EVENT1: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* winbase.h:764:9, winbase.h:764:9, winbase.h:764:9 */
#[cfg(feature="winapi_app")] pub const EV_EVENT2: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:765:9, winbase.h:765:9, winbase.h:765:9 */
#[cfg(feature="winapi_app")] pub const SETXOFF: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:771:9, winbase.h:771:9, winbase.h:771:9 */
#[cfg(feature="winapi_app")] pub const SETXON: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:772:9, winbase.h:772:9, winbase.h:772:9 */
#[cfg(feature="winapi_app")] pub const SETRTS: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:773:9, winbase.h:773:9, winbase.h:773:9 */
#[cfg(feature="winapi_app")] pub const CLRRTS: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:774:9, winbase.h:774:9, winbase.h:774:9 */
#[cfg(feature="winapi_app")] pub const SETDTR: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* winbase.h:775:9, winbase.h:775:9, winbase.h:775:9 */
#[cfg(feature="winapi_app")] pub const CLRDTR: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* winbase.h:776:9, winbase.h:776:9, winbase.h:776:9 */
#[cfg(feature="winapi_app")] pub const RESETDEV: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* winbase.h:777:9, winbase.h:777:9, winbase.h:777:9 */
#[cfg(feature="winapi_app")] pub const SETBREAK: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:778:9, winbase.h:778:9, winbase.h:778:9 */
#[cfg(feature="winapi_app")] pub const CLRBREAK: i32 = 0x9i32; /* Integer(9, Yes, Unknown) */ /* winbase.h:779:9, winbase.h:779:9, winbase.h:779:9 */
#[cfg(feature="winapi_app")] pub const PURGE_TXABORT: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:784:9, winbase.h:784:9, winbase.h:784:9 */
#[cfg(feature="winapi_app")] pub const PURGE_RXABORT: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:785:9, winbase.h:785:9, winbase.h:785:9 */
#[cfg(feature="winapi_app")] pub const PURGE_TXCLEAR: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:786:9, winbase.h:786:9, winbase.h:786:9 */
#[cfg(feature="winapi_app")] pub const PURGE_RXCLEAR: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:787:9, winbase.h:787:9, winbase.h:787:9 */
#[cfg(feature="winapi_app")] pub const LPTx: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* winbase.h:789:9, winbase.h:789:9, winbase.h:789:9 */
#[cfg(feature="winapi_app")] pub const S_QUEUEEMPTY: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:803:9, winbase.h:803:9, winbase.h:803:9 */
#[cfg(feature="winapi_app")] pub const S_THRESHOLD: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:804:9, winbase.h:804:9, winbase.h:804:9 */
#[cfg(feature="winapi_app")] pub const S_ALLTHRESHOLD: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:805:9, winbase.h:805:9, winbase.h:805:9 */
#[cfg(feature="winapi_app")] pub const S_NORMAL: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:811:9, winbase.h:811:9, winbase.h:811:9 */
#[cfg(feature="winapi_app")] pub const S_LEGATO: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:812:9, winbase.h:812:9, winbase.h:812:9 */
#[cfg(feature="winapi_app")] pub const S_STACCATO: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:813:9, winbase.h:813:9, winbase.h:813:9 */
#[cfg(feature="winapi_app")] pub const S_PERIOD512: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:819:9, winbase.h:819:9, winbase.h:819:9 */
#[cfg(feature="winapi_app")] pub const S_PERIOD1024: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:820:9, winbase.h:820:9, winbase.h:820:9 */
#[cfg(feature="winapi_app")] pub const S_PERIOD2048: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:821:9, winbase.h:821:9, winbase.h:821:9 */
#[cfg(feature="winapi_app")] pub const S_PERIODVOICE: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:822:9, winbase.h:822:9, winbase.h:822:9 */
#[cfg(feature="winapi_app")] pub const S_WHITE512: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:823:9, winbase.h:823:9, winbase.h:823:9 */
#[cfg(feature="winapi_app")] pub const S_WHITE1024: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* winbase.h:824:9, winbase.h:824:9, winbase.h:824:9 */
#[cfg(feature="winapi_app")] pub const S_WHITE2048: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* winbase.h:825:9, winbase.h:825:9, winbase.h:825:9 */
#[cfg(feature="winapi_app")] pub const S_WHITEVOICE: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* winbase.h:826:9, winbase.h:826:9, winbase.h:826:9 */
#[cfg(feature="winapi_app")] pub const NMPWAIT_WAIT_FOREVER: i32 = 0xffffffffi32; /* Integer(4294967295, Yes, Unknown) */ /* winbase.h:845:9, winbase.h:845:9, winbase.h:845:9 */
#[cfg(feature="winapi_app")] pub const NMPWAIT_NOWAIT: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:846:9, winbase.h:846:9, winbase.h:846:9 */
#[cfg(feature="winapi_app")] pub const NMPWAIT_USE_DEFAULT_WAIT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:847:9, winbase.h:847:9, winbase.h:847:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::FILE_CASE_PRESERVED_NAMES as FS_CASE_IS_PRESERVED; /* winbase.h:849:9, winbase.h:849:9, winbase.h:849:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::FILE_CASE_SENSITIVE_SEARCH as FS_CASE_SENSITIVE; /* winbase.h:850:9, winbase.h:850:9, winbase.h:850:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::FILE_UNICODE_ON_DISK as FS_UNICODE_STORED_ON_DISK; /* winbase.h:851:9, winbase.h:851:9, winbase.h:851:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::FILE_PERSISTENT_ACLS as FS_PERSISTENT_ACLS; /* winbase.h:852:9, winbase.h:852:9, winbase.h:852:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::FILE_VOLUME_IS_COMPRESSED as FS_VOL_IS_COMPRESSED; /* winbase.h:853:9, winbase.h:853:9, winbase.h:853:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::FILE_FILE_COMPRESSION as FS_FILE_COMPRESSION; /* winbase.h:854:9, winbase.h:854:9, winbase.h:854:9 */
#[cfg(feature="winapi_app")] #[doc(inline)] pub use ::winnt::FILE_SUPPORTS_ENCRYPTION as FS_FILE_ENCRYPTION; /* winbase.h:855:9, winbase.h:855:9, winbase.h:855:9 */
#[cfg(feature="winapi_app")] pub const OF_READ: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:857:9, winbase.h:857:9, winbase.h:857:9 */
#[cfg(feature="winapi_app")] pub const OF_WRITE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:858:9, winbase.h:858:9, winbase.h:858:9 */
#[cfg(feature="winapi_app")] pub const OF_READWRITE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:859:9, winbase.h:859:9, winbase.h:859:9 */
#[cfg(feature="winapi_app")] pub const OF_SHARE_COMPAT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:860:9, winbase.h:860:9, winbase.h:860:9 */
#[cfg(feature="winapi_app")] pub const OF_SHARE_EXCLUSIVE: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:861:9, winbase.h:861:9, winbase.h:861:9 */
#[cfg(feature="winapi_app")] pub const OF_SHARE_DENY_WRITE: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:862:9, winbase.h:862:9, winbase.h:862:9 */
#[cfg(feature="winapi_app")] pub const OF_SHARE_DENY_READ: i32 = 0x30i32; /* Integer(48, Yes, Unknown) */ /* winbase.h:863:9, winbase.h:863:9, winbase.h:863:9 */
#[cfg(feature="winapi_app")] pub const OF_SHARE_DENY_NONE: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* winbase.h:864:9, winbase.h:864:9, winbase.h:864:9 */
#[cfg(feature="winapi_app")] pub const OF_PARSE: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* winbase.h:865:9, winbase.h:865:9, winbase.h:865:9 */
#[cfg(feature="winapi_app")] pub const OF_DELETE: i32 = 0x200i32; /* Integer(512, Yes, Unknown) */ /* winbase.h:866:9, winbase.h:866:9, winbase.h:866:9 */
#[cfg(feature="winapi_app")] pub const OF_VERIFY: i32 = 0x400i32; /* Integer(1024, Yes, Unknown) */ /* winbase.h:867:9, winbase.h:867:9, winbase.h:867:9 */
#[cfg(feature="winapi_app")] pub const OF_CANCEL: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* winbase.h:868:9, winbase.h:868:9, winbase.h:868:9 */
#[cfg(feature="winapi_app")] pub const OF_CREATE: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:869:9, winbase.h:869:9, winbase.h:869:9 */
#[cfg(feature="winapi_app")] pub const OF_PROMPT: i32 = 0x2000i32; /* Integer(8192, Yes, Unknown) */ /* winbase.h:870:9, winbase.h:870:9, winbase.h:870:9 */
#[cfg(feature="winapi_app")] pub const OF_EXIST: i32 = 0x4000i32; /* Integer(16384, Yes, Unknown) */ /* winbase.h:871:9, winbase.h:871:9, winbase.h:871:9 */
#[cfg(feature="winapi_app")] pub const OF_REOPEN: i32 = 0x8000i32; /* Integer(32768, Yes, Unknown) */ /* winbase.h:872:9, winbase.h:872:9, winbase.h:872:9 */
#[cfg(feature="winapi_app")] pub const OFS_MAXPATHNAME: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* winbase.h:874:9, winbase.h:874:9, winbase.h:874:9 */
#[cfg(feature="winapi_app")] pub const MAXINTATOM: i32 = 0xc000i32; /* Integer(49152, Yes, Unknown) */ /* winbase.h:885:9, winbase.h:885:9, winbase.h:885:9 */
#[cfg(feature="winapi_desktop")] pub const SCS_32BIT_BINARY: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:1130:9, winbase.h:1130:9, winbase.h:1130:9 */
#[cfg(feature="winapi_desktop")] pub const SCS_DOS_BINARY: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:1131:9, winbase.h:1131:9, winbase.h:1131:9 */
#[cfg(feature="winapi_desktop")] pub const SCS_WOW_BINARY: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:1132:9, winbase.h:1132:9, winbase.h:1132:9 */
#[cfg(feature="winapi_desktop")] pub const SCS_PIF_BINARY: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:1133:9, winbase.h:1133:9, winbase.h:1133:9 */
#[cfg(feature="winapi_desktop")] pub const SCS_POSIX_BINARY: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:1134:9, winbase.h:1134:9, winbase.h:1134:9 */
#[cfg(feature="winapi_desktop")] pub const SCS_OS216_BINARY: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* winbase.h:1135:9, winbase.h:1135:9, winbase.h:1135:9 */
#[cfg(feature="winapi_desktop")] pub const SCS_64BIT_BINARY: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* winbase.h:1136:9, winbase.h:1136:9, winbase.h:1136:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(target_arch="x86", target_arch="arm"))] #[doc(inline)] pub use ::winbase::SCS_32BIT_BINARY as SCS_THIS_PLATFORM_BINARY; /* winbase.h:1141:10, winbase.h:1141:10 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_04000000"))] pub const FIBER_FLAG_FLOAT_SWITCH: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:1295:9, winbase.h:1295:9, winbase.h:1295:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROCESS_DEP_ENABLE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:1631:9, winbase.h:1631:9, winbase.h:1631:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:1632:9, winbase.h:1632:9, winbase.h:1632:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:1763:9, winbase.h:1763:9, winbase.h:1763:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const FILE_SKIP_SET_EVENT_ON_HANDLE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:1768:9, winbase.h:1768:9, winbase.h:1768:9 */
#[cfg(feature="winapi_desktop")] pub const SEM_FAILCRITICALERRORS: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:1780:9, winbase.h:1780:9, winbase.h:1780:9 */
#[cfg(feature="winapi_desktop")] pub const SEM_NOGPFAULTERRORBOX: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:1781:9, winbase.h:1781:9, winbase.h:1781:9 */
#[cfg(feature="winapi_desktop")] pub const SEM_NOALIGNMENTFAULTEXCEPT: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:1782:9, winbase.h:1782:9, winbase.h:1782:9 */
#[cfg(feature="winapi_desktop")] pub const SEM_NOOPENFILEERRORBOX: i32 = 0x8000i32; /* Integer(32768, Yes, Unknown) */ /* winbase.h:1783:9, winbase.h:1783:9, winbase.h:1783:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_05000000"))] #[doc(inline)] pub use ::winnt::RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO as CRITICAL_SECTION_NO_DEBUG_INFO; /* winbase.h:1873:9, winbase.h:1873:9, winbase.h:1873:9 */
#[cfg(feature="winapi_desktop")] pub const HANDLE_FLAG_INHERIT: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:1978:9, winbase.h:1978:9, winbase.h:1978:9 */
#[cfg(feature="winapi_desktop")] pub const HANDLE_FLAG_PROTECT_FROM_CLOSE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:1979:9, winbase.h:1979:9, winbase.h:1979:9 */
#[cfg(feature="winapi_desktop")] pub const HINSTANCE_ERROR: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:1981:9, winbase.h:1981:9, winbase.h:1981:9 */
#[cfg(feature="winapi_desktop")] pub const GET_TAPE_MEDIA_INFORMATION: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:2228:9, winbase.h:2228:9, winbase.h:2228:9 */
#[cfg(feature="winapi_desktop")] pub const GET_TAPE_DRIVE_INFORMATION: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:2229:9, winbase.h:2229:9, winbase.h:2229:9 */
#[cfg(feature="winapi_desktop")] pub const SET_TAPE_MEDIA_INFORMATION: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:2240:9, winbase.h:2240:9, winbase.h:2240:9 */
#[cfg(feature="winapi_desktop")] pub const SET_TAPE_DRIVE_INFORMATION: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:2241:9, winbase.h:2241:9, winbase.h:2241:9 */
#[cfg(feature="winapi_app")] pub const FORMAT_MESSAGE_IGNORE_INSERTS: i32 = 0x200i32; /* Integer(512, Yes, Unknown) */ /* winbase.h:2388:9, winbase.h:2388:9, winbase.h:2388:9 */
#[cfg(feature="winapi_app")] pub const FORMAT_MESSAGE_FROM_STRING: i32 = 0x400i32; /* Integer(1024, Yes, Unknown) */ /* winbase.h:2389:9, winbase.h:2389:9, winbase.h:2389:9 */
#[cfg(feature="winapi_app")] pub const FORMAT_MESSAGE_FROM_HMODULE: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* winbase.h:2390:9, winbase.h:2390:9, winbase.h:2390:9 */
#[cfg(feature="winapi_app")] pub const FORMAT_MESSAGE_FROM_SYSTEM: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:2391:9, winbase.h:2391:9, winbase.h:2391:9 */
#[cfg(feature="winapi_app")] pub const FORMAT_MESSAGE_ARGUMENT_ARRAY: i32 = 0x2000i32; /* Integer(8192, Yes, Unknown) */ /* winbase.h:2392:9, winbase.h:2392:9, winbase.h:2392:9 */
#[cfg(feature="winapi_app")] pub const FORMAT_MESSAGE_MAX_WIDTH_MASK: i32 = 0xffi32; /* Integer(255, Yes, Unknown) */ /* winbase.h:2393:9, winbase.h:2393:9, winbase.h:2393:9 */
#[cfg(feature="winapi_desktop")] pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* winbase.h:2406:9, winbase.h:2406:9, winbase.h:2406:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_ENCRYPTABLE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:2509:9, winbase.h:2509:9, winbase.h:2509:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_IS_ENCRYPTED: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:2510:9, winbase.h:2510:9, winbase.h:2510:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_SYSTEM_ATTR: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:2511:9, winbase.h:2511:9, winbase.h:2511:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_ROOT_DIR: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:2512:9, winbase.h:2512:9, winbase.h:2512:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_SYSTEM_DIR: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:2513:9, winbase.h:2513:9, winbase.h:2513:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_UNKNOWN: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* winbase.h:2514:9, winbase.h:2514:9, winbase.h:2514:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_SYSTEM_NOT_SUPPORT: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* winbase.h:2515:9, winbase.h:2515:9, winbase.h:2515:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_USER_DISALLOWED: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* winbase.h:2516:9, winbase.h:2516:9, winbase.h:2516:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_READ_ONLY: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:2517:9, winbase.h:2517:9, winbase.h:2517:9 */
#[cfg(feature="winapi_desktop")] pub const FILE_DIR_DISALLOWED: i32 = 0x9i32; /* Integer(9, Yes, Unknown) */ /* winbase.h:2518:9, winbase.h:2518:9, winbase.h:2518:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_INVALID: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:2912:9, winbase.h:2912:9, winbase.h:2912:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_DATA: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:2913:9, winbase.h:2913:9, winbase.h:2913:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_EA_DATA: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:2914:9, winbase.h:2914:9, winbase.h:2914:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_SECURITY_DATA: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:2915:9, winbase.h:2915:9, winbase.h:2915:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_ALTERNATE_DATA: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:2916:9, winbase.h:2916:9, winbase.h:2916:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_LINK: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* winbase.h:2917:9, winbase.h:2917:9, winbase.h:2917:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_PROPERTY_DATA: i32 = 0x6i32; /* Integer(6, Yes, Unknown) */ /* winbase.h:2918:9, winbase.h:2918:9, winbase.h:2918:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_OBJECT_ID: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* winbase.h:2919:9, winbase.h:2919:9, winbase.h:2919:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_REPARSE_DATA: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:2920:9, winbase.h:2920:9, winbase.h:2920:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_SPARSE_BLOCK: i32 = 0x9i32; /* Integer(9, Yes, Unknown) */ /* winbase.h:2921:9, winbase.h:2921:9, winbase.h:2921:9 */
#[cfg(feature="winapi_desktop")] pub const BACKUP_TXFS_DATA: i32 = 0xai32; /* Integer(10, Yes, Unknown) */ /* winbase.h:2922:9, winbase.h:2922:9, winbase.h:2922:9 */
#[cfg(feature="winapi_desktop")] pub const STREAM_NORMAL_ATTRIBUTE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:2929:9, winbase.h:2929:9, winbase.h:2929:9 */
#[cfg(feature="winapi_desktop")] pub const STREAM_MODIFIED_WHEN_READ: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:2930:9, winbase.h:2930:9, winbase.h:2930:9 */
#[cfg(feature="winapi_desktop")] pub const STREAM_CONTAINS_SECURITY: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:2931:9, winbase.h:2931:9, winbase.h:2931:9 */
#[cfg(feature="winapi_desktop")] pub const STREAM_CONTAINS_PROPERTIES: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:2932:9, winbase.h:2932:9, winbase.h:2932:9 */
#[cfg(feature="winapi_desktop")] pub const STREAM_SPARSE_ATTRIBUTE: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:2933:9, winbase.h:2933:9, winbase.h:2933:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_USESHOWWINDOW: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:2939:9, winbase.h:2939:9, winbase.h:2939:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_USESIZE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:2940:9, winbase.h:2940:9, winbase.h:2940:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_USEPOSITION: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:2941:9, winbase.h:2941:9, winbase.h:2941:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_USECOUNTCHARS: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:2942:9, winbase.h:2942:9, winbase.h:2942:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_USEFILLATTRIBUTE: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:2943:9, winbase.h:2943:9, winbase.h:2943:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_RUNFULLSCREEN: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:2944:9, winbase.h:2944:9, winbase.h:2944:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_FORCEONFEEDBACK: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* winbase.h:2945:9, winbase.h:2945:9, winbase.h:2945:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_FORCEOFFFEEDBACK: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* winbase.h:2946:9, winbase.h:2946:9, winbase.h:2946:9 */
#[cfg(feature="winapi_desktop")] pub const STARTF_USESTDHANDLES: i32 = 0x100i32; /* Integer(256, Yes, Unknown) */ /* winbase.h:2947:9, winbase.h:2947:9, winbase.h:2947:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const STARTF_USEHOTKEY: i32 = 0x200i32; /* Integer(512, Yes, Unknown) */ /* winbase.h:2951:9, winbase.h:2951:9, winbase.h:2951:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const STARTF_TITLEISLINKNAME: i32 = 0x800i32; /* Integer(2048, Yes, Unknown) */ /* winbase.h:2952:9, winbase.h:2952:9, winbase.h:2952:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const STARTF_TITLEISAPPID: i32 = 0x1000i32; /* Integer(4096, Yes, Unknown) */ /* winbase.h:2953:9, winbase.h:2953:9, winbase.h:2953:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const STARTF_PREVENTPINNING: i32 = 0x2000i32; /* Integer(8192, Yes, Unknown) */ /* winbase.h:2954:9, winbase.h:2954:9, winbase.h:2954:9 */
#[cfg(feature="winapi_desktop")] pub const SHUTDOWN_NORETRY: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:2977:9, winbase.h:2977:9, winbase.h:2977:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROCESS_NAME_NATIVE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:3222:9, winbase.h:3222:9, winbase.h:3222:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROC_THREAD_ATTRIBUTE_NUMBER: i32 = 0xffffi32; /* Integer(65535, Yes, Unknown) */ /* winbase.h:3256:9, winbase.h:3256:9, winbase.h:3256:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROC_THREAD_ATTRIBUTE_THREAD: i32 = 0x10000i32; /* Integer(65536, Yes, Unknown) */ /* winbase.h:3257:9, winbase.h:3257:9, winbase.h:3257:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROC_THREAD_ATTRIBUTE_INPUT: i32 = 0x20000i32; /* Integer(131072, Yes, Unknown) */ /* winbase.h:3258:9, winbase.h:3258:9, winbase.h:3258:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROC_THREAD_ATTRIBUTE_ADDITIVE: i32 = 0x40000i32; /* Integer(262144, Yes, Unknown) */ /* winbase.h:3259:9, winbase.h:3259:9, winbase.h:3259:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const PROTECTION_LEVEL_SAME: i32 = 0xffffffffi32; /* Integer(4294967295, Yes, Unknown) */ /* winbase.h:3262:9, winbase.h:3262:9, winbase.h:3262:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:3322:9, winbase.h:3322:9, winbase.h:3322:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:3323:9, winbase.h:3323:9, winbase.h:3323:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06010000"))] pub const PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:3324:9, winbase.h:3324:9, winbase.h:3324:9 */
#[cfg(feature="winapi_desktop")] pub const ATOM_FLAG_GLOBAL: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:3840:9, winbase.h:3840:9, winbase.h:3840:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A: &'static str = "GetSystemWow64DirectoryA"; /* String("GetSystemWow64DirectoryA", Narrow) */ /* winbase.h:4502:9, winbase.h:4502:9, winbase.h:4502:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W: &'static str = "GetSystemWow64DirectoryA"; /* String("GetSystemWow64DirectoryA", Wide) */ /* winbase.h:4503:9, winbase.h:4503:9, winbase.h:4503:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T: &'static str = "GetSystemWow64DirectoryA"; /* Call { subject: Ident("TEXT"), args: [String("GetSystemWow64DirectoryA", Narrow)] } */ /* winbase.h:4504:9, winbase.h:4504:9, winbase.h:4504:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A: &'static str = "GetSystemWow64DirectoryW"; /* String("GetSystemWow64DirectoryW", Narrow) */ /* winbase.h:4505:9, winbase.h:4505:9, winbase.h:4505:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W: &'static str = "GetSystemWow64DirectoryW"; /* String("GetSystemWow64DirectoryW", Wide) */ /* winbase.h:4506:9, winbase.h:4506:9, winbase.h:4506:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T: &'static str = "GetSystemWow64DirectoryW"; /* Call { subject: Ident("TEXT"), args: [String("GetSystemWow64DirectoryW", Narrow)] } */ /* winbase.h:4507:9, winbase.h:4507:9, winbase.h:4507:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] #[doc(inline)] pub use ::winbase::GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A as GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A; /* winbase.h:4510:9, winbase.h:4510:9, winbase.h:4510:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] #[doc(inline)] pub use ::winbase::GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W as GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W; /* winbase.h:4511:9, winbase.h:4511:9, winbase.h:4511:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05010000"))] #[doc(inline)] pub use ::winbase::GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T as GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T; /* winbase.h:4512:9, winbase.h:4512:9, winbase.h:4512:9 */
#[cfg(feature="winapi_desktop")] pub const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:4604:9, winbase.h:4604:9, winbase.h:4604:9 */
#[cfg(feature="winapi_desktop")] pub const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE: i32 = 0x10000i32; /* Integer(65536, Yes, Unknown) */ /* winbase.h:4605:9, winbase.h:4605:9, winbase.h:4605:9 */
#[cfg(feature="winapi_desktop")] pub const BASE_SEARCH_PATH_PERMANENT: i32 = 0x8000i32; /* Integer(32768, Yes, Unknown) */ /* winbase.h:4606:9, winbase.h:4606:9, winbase.h:4606:9 */
#[cfg(feature="winapi_desktop")] pub const BASE_SEARCH_PATH_INVALID_FLAGS: i32 = !0x18001i32; /* Unary(Com, Integer(98305, Yes, Unknown)) */ /* winbase.h:4607:9, winbase.h:4607:9, winbase.h:4607:9 */
#[cfg(feature="winapi_desktop")] pub const DDD_RAW_TARGET_PATH: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:4746:9, winbase.h:4746:9, winbase.h:4746:9 */
#[cfg(feature="winapi_desktop")] pub const DDD_REMOVE_DEFINITION: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:4747:9, winbase.h:4747:9, winbase.h:4747:9 */
#[cfg(feature="winapi_desktop")] pub const DDD_EXACT_MATCH_ON_REMOVE: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:4748:9, winbase.h:4748:9, winbase.h:4748:9 */
#[cfg(feature="winapi_desktop")] pub const DDD_NO_BROADCAST_SYSTEM: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:4749:9, winbase.h:4749:9, winbase.h:4749:9 */
#[cfg(feature="winapi_desktop")] pub const DDD_LUID_BROADCAST_DRIVE: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:4750:9, winbase.h:4750:9, winbase.h:4750:9 */
#[cfg(feature="winapi_app")] pub const MOVEFILE_REPLACE_EXISTING: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:5454:9, winbase.h:5454:9, winbase.h:5454:9 */
#[cfg(feature="winapi_app")] pub const MOVEFILE_COPY_ALLOWED: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:5455:9, winbase.h:5455:9, winbase.h:5455:9 */
#[cfg(feature="winapi_app")] pub const MOVEFILE_DELAY_UNTIL_REBOOT: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:5456:9, winbase.h:5456:9, winbase.h:5456:9 */
#[cfg(feature="winapi_app")] pub const MOVEFILE_WRITE_THROUGH: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:5457:9, winbase.h:5457:9, winbase.h:5457:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_05000000"))] pub const MOVEFILE_CREATE_HARDLINK: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:5459:9, winbase.h:5459:9, winbase.h:5459:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_05000000"))] pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:5460:9, winbase.h:5460:9, winbase.h:5460:9 */
#[cfg(feature="winapi_desktop")] pub const EVENTLOG_FULL_INFO: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:6075:9, winbase.h:6075:9, winbase.h:6075:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] pub const OPERATION_API_VERSION: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:6100:9, winbase.h:6100:9, winbase.h:6100:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] pub const OPERATION_START_TRACE_CURRENT_THREAD: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:6113:9, winbase.h:6113:9, winbase.h:6113:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06020000"))] pub const OPERATION_END_DISCARD: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:6125:9, winbase.h:6125:9, winbase.h:6125:9 */
#[cfg(feature="winapi_desktop")] pub const MAX_COMPUTERNAME_LENGTH: i32 = 0xfi32; /* Integer(15, Yes, Unknown) */ /* winbase.h:6780:9, winbase.h:6780:9, winbase.h:6780:9 */
#[cfg(feature="winapi_desktop")] pub const LOGON32_LOGON_INTERACTIVE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:6890:9, winbase.h:6890:9, winbase.h:6890:9 */
#[cfg(feature="winapi_desktop")] pub const LOGON32_LOGON_NETWORK: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:6891:9, winbase.h:6891:9, winbase.h:6891:9 */
#[cfg(feature="winapi_desktop")] pub const LOGON32_LOGON_BATCH: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:6892:9, winbase.h:6892:9, winbase.h:6892:9 */
#[cfg(feature="winapi_desktop")] pub const LOGON32_LOGON_SERVICE: i32 = 0x5i32; /* Integer(5, Yes, Unknown) */ /* winbase.h:6893:9, winbase.h:6893:9, winbase.h:6893:9 */
#[cfg(feature="winapi_desktop")] pub const LOGON32_LOGON_UNLOCK: i32 = 0x7i32; /* Integer(7, Yes, Unknown) */ /* winbase.h:6894:9, winbase.h:6894:9, winbase.h:6894:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub const LOGON32_LOGON_NETWORK_CLEARTEXT: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:6896:9, winbase.h:6896:9, winbase.h:6896:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub const LOGON32_LOGON_NEW_CREDENTIALS: i32 = 0x9i32; /* Integer(9, Yes, Unknown) */ /* winbase.h:6897:9, winbase.h:6897:9, winbase.h:6897:9 */
#[cfg(feature="winapi_desktop")] pub const LOGON32_PROVIDER_DEFAULT: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:6900:9, winbase.h:6900:9, winbase.h:6900:9 */
#[cfg(feature="winapi_desktop")] pub const LOGON32_PROVIDER_WINNT35: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:6901:9, winbase.h:6901:9, winbase.h:6901:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const LOGON32_PROVIDER_WINNT40: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:6903:9, winbase.h:6903:9, winbase.h:6903:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub const LOGON32_PROVIDER_WINNT50: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:6906:9, winbase.h:6906:9, winbase.h:6906:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_06000000"))] pub const LOGON32_PROVIDER_VIRTUAL: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:6909:9, winbase.h:6909:9, winbase.h:6909:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub const LOGON_WITH_PROFILE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:7010:9, winbase.h:7010:9, winbase.h:7010:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub const LOGON_NETCREDENTIALS_ONLY: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:7011:9, winbase.h:7011:9, winbase.h:7011:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub const LOGON_ZERO_PASSWORD_BUFFER: i32 = 0x80000000i32; /* Integer(2147483648, Yes, Unknown) */ /* winbase.h:7012:9, winbase.h:7012:9, winbase.h:7012:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const HW_PROFILE_GUIDLEN: i32 = 0x27i32; /* Integer(39, Yes, Unknown) */ /* winbase.h:7281:9, winbase.h:7281:9, winbase.h:7281:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const MAX_PROFILE_LEN: i32 = 0x50i32; /* Integer(80, Yes, Unknown) */ /* winbase.h:7282:9, winbase.h:7282:9, winbase.h:7282:9 */
#[cfg(feature="winapi_desktop")] pub const TC_NORMAL: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:7366:9, winbase.h:7366:9, winbase.h:7366:9 */
#[cfg(feature="winapi_desktop")] pub const TC_HARDERR: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:7367:9, winbase.h:7367:9, winbase.h:7367:9 */
#[cfg(feature="winapi_desktop")] pub const TC_GP_TRAP: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:7368:9, winbase.h:7368:9, winbase.h:7368:9 */
#[cfg(feature="winapi_desktop")] pub const TC_SIGNAL: i32 = 0x3i32; /* Integer(3, Yes, Unknown) */ /* winbase.h:7369:9, winbase.h:7369:9, winbase.h:7369:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const AC_LINE_OFFLINE: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:7376:9, winbase.h:7376:9, winbase.h:7376:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const AC_LINE_ONLINE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:7377:9, winbase.h:7377:9, winbase.h:7377:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const AC_LINE_BACKUP_POWER: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:7378:9, winbase.h:7378:9, winbase.h:7378:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const AC_LINE_UNKNOWN: i32 = 0xffi32; /* Integer(255, Yes, Unknown) */ /* winbase.h:7379:9, winbase.h:7379:9, winbase.h:7379:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_FLAG_HIGH: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:7381:9, winbase.h:7381:9, winbase.h:7381:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_FLAG_LOW: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:7382:9, winbase.h:7382:9, winbase.h:7382:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_FLAG_CRITICAL: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:7383:9, winbase.h:7383:9, winbase.h:7383:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_FLAG_CHARGING: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:7384:9, winbase.h:7384:9, winbase.h:7384:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_FLAG_NO_BATTERY: i32 = 0x80i32; /* Integer(128, Yes, Unknown) */ /* winbase.h:7385:9, winbase.h:7385:9, winbase.h:7385:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_FLAG_UNKNOWN: i32 = 0xffi32; /* Integer(255, Yes, Unknown) */ /* winbase.h:7386:9, winbase.h:7386:9, winbase.h:7386:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_PERCENTAGE_UNKNOWN: i32 = 0xffi32; /* Integer(255, Yes, Unknown) */ /* winbase.h:7388:9, winbase.h:7388:9, winbase.h:7388:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_04000000"))] pub const BATTERY_LIFE_UNKNOWN: i32 = 0xffffffffi32; /* Integer(4294967295, Yes, Unknown) */ /* winbase.h:7390:9, winbase.h:7390:9, winbase.h:7390:9 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] pub const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:7887:9, winbase.h:7887:9, winbase.h:7887:9 */
#[cfg(feature="winapi_desktop")] pub const RESTART_MAX_CMD_LINE: i32 = 0x400i32; /* Integer(1024, Yes, Unknown) */ /* winbase.h:8093:9, winbase.h:8093:9, winbase.h:8093:9 */
#[cfg(feature="winapi_desktop")] pub const RESTART_NO_CRASH: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:8098:9, winbase.h:8098:9, winbase.h:8098:9 */
#[cfg(feature="winapi_desktop")] pub const RESTART_NO_HANG: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:8103:9, winbase.h:8103:9, winbase.h:8103:9 */
#[cfg(feature="winapi_desktop")] pub const RESTART_NO_PATCH: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:8108:9, winbase.h:8108:9, winbase.h:8108:9 */
#[cfg(feature="winapi_desktop")] pub const RESTART_NO_REBOOT: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:8113:9, winbase.h:8113:9, winbase.h:8113:9 */
#[cfg(feature="winapi_desktop")] pub const RECOVERY_DEFAULT_PING_INTERVAL: i32 = 0x1388i32; /* Integer(5000, Yes, Unknown) */ /* winbase.h:8115:9, winbase.h:8115:9, winbase.h:8115:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const STORAGE_INFO_FLAGS_ALIGNED_DEVICE: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:8316:9, winbase.h:8316:9, winbase.h:8316:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:8317:9, winbase.h:8317:9, winbase.h:8317:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub const REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:8372:9, winbase.h:8372:9, winbase.h:8372:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06000000"))] pub const REMOTE_PROTOCOL_INFO_FLAG_OFFLINE: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:8373:9, winbase.h:8373:9, winbase.h:8373:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:8376:9, winbase.h:8376:9, winbase.h:8376:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_FLAG_SMB2_SHARECAP_TIMEWARP: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:8382:9, winbase.h:8382:9, winbase.h:8382:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_FLAG_SMB2_SHARECAP_DFS: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:8383:9, winbase.h:8383:9, winbase.h:8383:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:8384:9, winbase.h:8384:9, winbase.h:8384:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_FLAG_SMB2_SHARECAP_SCALEOUT: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:8385:9, winbase.h:8385:9, winbase.h:8385:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_FLAG_SMB2_SHARECAP_CLUSTER: i32 = 0x40i32; /* Integer(64, Yes, Unknown) */ /* winbase.h:8386:9, winbase.h:8386:9, winbase.h:8386:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_SMB2_FLAG_SERVERCAP_DFS: i32 = 0x1i32; /* Integer(1, Yes, Unknown) */ /* winbase.h:8392:9, winbase.h:8392:9, winbase.h:8392:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_SMB2_FLAG_SERVERCAP_LEASING: i32 = 0x2i32; /* Integer(2, Yes, Unknown) */ /* winbase.h:8393:9, winbase.h:8393:9, winbase.h:8393:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_SMB2_FLAG_SERVERCAP_LARGEMTU: i32 = 0x4i32; /* Integer(4, Yes, Unknown) */ /* winbase.h:8394:9, winbase.h:8394:9, winbase.h:8394:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL: i32 = 0x8i32; /* Integer(8, Yes, Unknown) */ /* winbase.h:8395:9, winbase.h:8395:9, winbase.h:8395:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES: i32 = 0x10i32; /* Integer(16, Yes, Unknown) */ /* winbase.h:8396:9, winbase.h:8396:9, winbase.h:8396:9 */
#[cfg(feature="winapi_app")] #[cfg(any(feature="winapi_ver_06020000"))] pub const RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING: i32 = 0x20i32; /* Integer(32, Yes, Unknown) */ /* winbase.h:8397:9, winbase.h:8397:9, winbase.h:8397:9 */
pub const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: i32 = 0x0i32; /* Integer(0, Yes, Unknown) */ /* winbase.h:9059:9, winbase.h:9059:9, winbase.h:9059:9 */
#[cfg(feature="winapi_app")] #[cfg(any(target_arch="x86_64", target_arch="arm"))] pub type LPLDT_ENTRY = ::minwindef::LPVOID; /* winbase.h:300:16, winbase.h:300:16 */
#[cfg(feature="winapi_desktop")] #[cfg(any(feature="winapi_ver_05000000"))] #[cfg(any(target_arch="x86_64"))] pub type PQUERYACTCTXW_FUNC = extern "system" fn(::libc::c_ulong, *mut ::libc::c_void, *mut ::libc::c_void, ::libc::c_ulong, *mut ::libc::c_void, ::libc::c_ulonglong, *mut ::libc::c_ulonglong) -> ::libc::c_int; /* winbase.h:7941:42 */
#[cfg(feature="winapi_desktop")] #[cfg(any(target_arch="x86_64"))] #[doc(inline)] pub use ::winbase::SCS_64BIT_BINARY as SCS_THIS_PLATFORM_BINARY; /* winbase.h:1139:10 */
